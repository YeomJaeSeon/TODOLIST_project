[{"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\index.tsx":"1","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\reportWebVitals.ts":"2","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\App.tsx":"3","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.tsx":"4","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.tsx":"5","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.style.ts":"6","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\utils\\css-utils.ts":"7","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\auth_service.ts":"8","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\firebase.ts":"9","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.style.ts":"10","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.tsx":"11","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.tsx":"12","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.style.ts":"13","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.tsx":"14","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.style.ts":"15","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.style.ts":"16","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.tsx":"17","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.style.ts":"18","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.tsx":"19","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.tsx":"20","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.style.ts":"21","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\index.ts":"22","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\todos.ts":"23","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.tsx":"24","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.tsx":"25","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.style.ts":"26","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.style.ts":"27","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.style.ts":"28","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.tsx":"29","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.style.ts":"30","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\data_service.ts":"31","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Ranking\\Ranking.tsx":"32","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Ranking\\Ranking.style.ts":"33"},{"size":950,"mtime":1613542090225,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":1612327212632,"results":"36","hashOfConfig":"35"},{"size":910,"mtime":1614165961636,"results":"37","hashOfConfig":"35"},{"size":3151,"mtime":1613540460643,"results":"38","hashOfConfig":"35"},{"size":3666,"mtime":1614166868589,"results":"39","hashOfConfig":"35"},{"size":2353,"mtime":1612684084796,"results":"40","hashOfConfig":"35"},{"size":276,"mtime":1612684073845,"results":"41","hashOfConfig":"35"},{"size":1083,"mtime":1613542513463,"results":"42","hashOfConfig":"35"},{"size":784,"mtime":1613538971249,"results":"43","hashOfConfig":"35"},{"size":145,"mtime":1612430949335,"results":"44","hashOfConfig":"35"},{"size":1686,"mtime":1614166574533,"results":"45","hashOfConfig":"35"},{"size":5793,"mtime":1614230659046,"results":"46","hashOfConfig":"35"},{"size":1705,"mtime":1612684096233,"results":"47","hashOfConfig":"35"},{"size":3346,"mtime":1614166528444,"results":"48","hashOfConfig":"35"},{"size":1654,"mtime":1613367719512,"results":"49","hashOfConfig":"35"},{"size":534,"mtime":1612498497364,"results":"50","hashOfConfig":"35"},{"size":1542,"mtime":1614166555888,"results":"51","hashOfConfig":"35"},{"size":155,"mtime":1612506051287,"results":"52","hashOfConfig":"35"},{"size":1388,"mtime":1614166647244,"results":"53","hashOfConfig":"35"},{"size":2445,"mtime":1614232266598,"results":"54","hashOfConfig":"35"},{"size":745,"mtime":1614168324524,"results":"55","hashOfConfig":"35"},{"size":224,"mtime":1613290070010,"results":"56","hashOfConfig":"35"},{"size":5889,"mtime":1614082992383,"results":"57","hashOfConfig":"35"},{"size":1662,"mtime":1614171602684,"results":"58","hashOfConfig":"35"},{"size":2687,"mtime":1614166452293,"results":"59","hashOfConfig":"35"},{"size":1780,"mtime":1613538711642,"results":"60","hashOfConfig":"35"},{"size":1183,"mtime":1614170331982,"results":"61","hashOfConfig":"35"},{"size":697,"mtime":1614168359506,"results":"62","hashOfConfig":"35"},{"size":2178,"mtime":1614166633249,"results":"63","hashOfConfig":"35"},{"size":1744,"mtime":1613371229707,"results":"64","hashOfConfig":"35"},{"size":4421,"mtime":1614169667124,"results":"65","hashOfConfig":"35"},{"size":1691,"mtime":1614232375480,"results":"66","hashOfConfig":"35"},{"size":1405,"mtime":1614232774833,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"12vozf8",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\index.tsx",[],["143","144"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\reportWebVitals.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\App.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.tsx",["145"],"import React, { useEffect, useRef } from 'react';\r\nimport {\r\n  LoginContainer,\r\n  ContentContainer,\r\n  TextContainer,\r\n  Title,\r\n  Description,\r\n  FormContainer,\r\n  FormTitle,\r\n  InputText,\r\n  Button,\r\n  SignUpContainer,\r\n  SignUpText,\r\n  SignUpButton,\r\n  Footer,\r\n} from './Login.style';\r\nimport { AuthServiceType } from '../../services/auth_service';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthType } from '../../services/firebase';\r\n\r\ntype PropType = {\r\n  authService: AuthServiceType;\r\n};\r\nconst Login = ({ authService }: PropType) => {\r\n  const emailRef = useRef<HTMLInputElement>(null);\r\n  const pwdRef = useRef<HTMLInputElement>(null);\r\n  const history = useHistory();\r\n\r\n  const loginHandler = () => {\r\n    const email = emailRef.current && emailRef.current.value;\r\n    const pwd = pwdRef.current && pwdRef.current.value;\r\n    if (email && pwd) {\r\n      authService\r\n        .login(email, pwd)\r\n        .then((value) => {\r\n          alert('로그인 성공');\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.code);\r\n          if (err.code === 'auth/user-not-found') {\r\n            alert('존재하지 않는 아이디입니다.');\r\n          } else if (err.code === 'auth/invalid-email') {\r\n            alert('잘못된 이메일 형식입니다.');\r\n          } else if (err.code === 'auth/wrong-password') {\r\n            alert('잘못된 비밀번호입니다.');\r\n          } else if (err.code === 'auth/too-many-requests') {\r\n            alert('너무많이 틀렸습니다. 잠시후 시도해주세요');\r\n          } else {\r\n            alert(err.message);\r\n          }\r\n        });\r\n    } else {\r\n      alert('이메일이나 비밀번호를 입력해주세요');\r\n    }\r\n  };\r\n\r\n  const goToMain = (uid: string) => {\r\n    history.push({\r\n      pathname: '/main',\r\n      state: { id: uid },\r\n    });\r\n  };\r\n\r\n  const goToSignUp = () => {\r\n    history.push('/signup');\r\n  };\r\n  useEffect(() => {\r\n    authService.onAuthStatus((user: AuthType) => {\r\n      user && goToMain(user.uid);\r\n    });\r\n  }, []);\r\n  return (\r\n    <LoginContainer>\r\n      <ContentContainer>\r\n        <TextContainer>\r\n          <Title>todo list 🏃‍♂️🏃‍♀️🏃‍♂🏃‍♀️</Title>\r\n          <Description>What is your first small step🦶?</Description>\r\n        </TextContainer>\r\n        <FormContainer onSubmit={(e) => e.preventDefault()}>\r\n          <FormTitle>Please Login</FormTitle>\r\n          <InputText\r\n            ref={emailRef}\r\n            type=\"text\"\r\n            placeholder=\"이메일 입력해주세요.\"\r\n          />\r\n          <InputText\r\n            ref={pwdRef}\r\n            type=\"password\"\r\n            placeholder=\"비밀번호 입력해주세요.\"\r\n          />\r\n          <Button onClick={loginHandler}>Login</Button>\r\n          <SignUpContainer>\r\n            <SignUpText>처음 방문하셨나요?</SignUpText>\r\n            <SignUpButton onClick={goToSignUp}>Sign Up</SignUpButton>\r\n          </SignUpContainer>\r\n        </FormContainer>\r\n      </ContentContainer>\r\n      <Footer>Show your passion!!🥇🥇🥇</Footer>\r\n    </LoginContainer>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.tsx",["146"],"import React, { useEffect } from 'react';\r\nimport { AuthServiceType } from '../../services/auth_service';\r\nimport { DatabaseType } from '../../services/data_service';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { MainContainer } from './Main.style';\r\nimport List from 'src/components/List/List';\r\nimport StartPlan from 'src/components/StartPlan/StartPlan';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootType } from '../../modules/index';\r\nimport {\r\n  initCardAction,\r\n  sameChangeCardAction,\r\n  diffChangeCardAction,\r\n} from 'src/modules/todos';\r\n\r\ntype LocationState = {\r\n  id: string | null;\r\n};\r\n\r\ntype PropType = {\r\n  authService: AuthServiceType;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst Main = ({ authService, databaseService }: PropType) => {\r\n  const cards = useSelector((state: RootType) => state.todoReducer);\r\n  const dispatch = useDispatch();\r\n  const location = useLocation<LocationState>();\r\n  const uid = location.state ? location.state.id : null;\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    authService.onAuthStatus((user) => {\r\n      if (!user) {\r\n        history.push('/');\r\n      }\r\n    });\r\n\r\n    const stopSync = databaseService.dataSync(uid, (value: any) => {\r\n      console.log(value);\r\n      if (!value) dispatch(initCardAction([]));\r\n      else {\r\n        const initState = Object.keys(value).map((key: string) => ({\r\n          id: key,\r\n          current: value[key].current,\r\n          today: value[key].today,\r\n          todos: value[key].todos\r\n            ? Object.keys(value[key].todos).map((todoKey) => ({\r\n                id: value[key].todos[todoKey].id,\r\n                thing: value[key].todos[todoKey].thing,\r\n                checked: value[key].todos[todoKey].checked,\r\n              }))\r\n            : [],\r\n        }));\r\n        dispatch(initCardAction(initState));\r\n      }\r\n    });\r\n\r\n    return () => stopSync();\r\n  }, [databaseService]);\r\n\r\n  const logoutHandler = () => {\r\n    authService.logout();\r\n  };\r\n\r\n  const cardChangeHandler = (result: DropResult) => {\r\n    const { source, destination } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (source.droppableId === destination.droppableId) {\r\n      const newCards = [...cards];\r\n      const [reorderedItem] = newCards.splice(source.index, 1);\r\n      newCards.splice(destination.index, 0, reorderedItem);\r\n\r\n      dispatch(sameChangeCardAction(newCards));\r\n    } else {\r\n      const selectedCard = cards.find((card) => card.id === result.draggableId);\r\n      const prevCard = cards.find((card) => card.current);\r\n\r\n      if (selectedCard) {\r\n        if (\r\n          selectedCard?.todos.length === 0 &&\r\n          destination.droppableId === 'card'\r\n        )\r\n          alert('할일을 먼저 입력해주세요!');\r\n        else {\r\n          dispatch(\r\n            diffChangeCardAction(\r\n              result.draggableId,\r\n              source.index,\r\n              destination.index\r\n            )\r\n          );\r\n          databaseService.changeToStart(\r\n            uid,\r\n            result.draggableId,\r\n            !selectedCard.current,\r\n            prevCard && prevCard.id\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainContainer>\r\n      <DragDropContext onDragEnd={cardChangeHandler}>\r\n        <List cards={cards} uid={uid} databaseService={databaseService} />\r\n        <StartPlan\r\n          logout={logoutHandler}\r\n          uid={uid}\r\n          databaseService={databaseService}\r\n        />\r\n      </DragDropContext>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\utils\\css-utils.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\auth_service.ts",["147"],"import { AuthType, SinUpType, firebaseAuth, GoogleProvider } from './firebase';\r\n\r\nexport type AuthServiceType = {\r\n  signUp(email: string, password: string): SinUpType;\r\n  login(email: string, password: string): SinUpType;\r\n  onAuthStatus(callback: (user: AuthType) => void): void;\r\n  logout(): void;\r\n};\r\n\r\nexport default class AuthService {\r\n  signUp(email: string, password: string) {\r\n    return firebaseAuth.createUserWithEmailAndPassword(email, password);\r\n  }\r\n  login(email: string, password: string) {\r\n    return firebaseAuth.signInWithEmailAndPassword(email, password);\r\n  }\r\n  createProvider(provider: string) {\r\n    switch (provider) {\r\n      case 'Google':\r\n        return GoogleProvider;\r\n      default:\r\n        throw new Error(`${provider}: 적절치 못한 로그인 시도입니다.`);\r\n    }\r\n  }\r\n  onAuthStatus(callback: (user: AuthType) => void) {\r\n    firebaseAuth.onAuthStateChanged((user: AuthType) => {\r\n      callback(user);\r\n    });\r\n  }\r\n  isUser() {\r\n    const user = firebaseAuth.currentUser;\r\n  }\r\n  logout() {\r\n    firebaseAuth.signOut();\r\n  }\r\n}\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\firebase.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.tsx",["148"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.tsx",["149"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\index.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\todos.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.tsx",["150"],"import React, { useEffect, useState } from 'react';\r\nimport { DatabaseType } from 'src/services/data_service';\r\nimport CurrentPlan from '../CurrentPlan/CurrentPlan';\r\nimport PlanTimer from '../PlanTimer/PlanTimer';\r\nimport Ranking from '../Ranking/Ranking';\r\nimport {\r\n  StartPlanContainer,\r\n  TimerTitle,\r\n  UserInfoSection,\r\n  UserInfoContainer,\r\n  UserCharacterName,\r\n  LogoutBtn,\r\n  RankingContainer,\r\n  EmptySection,\r\n  AllSection,\r\n} from './StartPlan.style';\r\n\r\ntype PropType = {\r\n  logout: () => void;\r\n  uid: string | null;\r\n  databaseService: DatabaseType;\r\n};\r\nconst StartPlan: React.FC<PropType> = ({ logout, uid, databaseService }) => {\r\n  const [currentUser, setCurrentUser] = useState('');\r\n\r\n  useEffect(() => {\r\n    databaseService.getLoginUserData(uid, (character) => {\r\n      setCurrentUser(character);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <StartPlanContainer>\r\n      <AllSection>\r\n        <TimerTitle>Start Planning 🏃‍♀️🏃‍♂️</TimerTitle>\r\n        <UserInfoSection>\r\n          {currentUser && (\r\n            <UserInfoContainer>\r\n              <UserCharacterName>{currentUser}</UserCharacterName>님 접속 중\r\n            </UserInfoContainer>\r\n          )}\r\n          <LogoutBtn onClick={logout}>Logout</LogoutBtn>\r\n        </UserInfoSection>\r\n        <PlanTimer uid={uid} databaseService={databaseService} />\r\n        <CurrentPlan uid={uid} databaseService={databaseService} />\r\n      </AllSection>\r\n      <RankingContainer>\r\n        <EmptySection></EmptySection>\r\n        <Ranking databaseService={databaseService}></Ranking>\r\n      </RankingContainer>\r\n    </StartPlanContainer>\r\n  );\r\n};\r\n\r\nexport default StartPlan;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.tsx",["151","152"],"import React, { useState } from 'react';\r\nimport Card from '../Card/Card';\r\nimport {\r\n  ListContainer,\r\n  Container,\r\n  EditorContainer,\r\n  ArrowIcon,\r\n  EditorTitle,\r\n  CardListContainer,\r\n  CardAddBtn,\r\n} from './List.style';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootType } from '../../modules/index';\r\nimport { addCardAction, StateType } from '../../modules/todos';\r\nimport { ReactComponent as LeftSVG } from '../../assets/svg/chevron-left-solid.svg';\r\nimport { ReactComponent as RightSVG } from '../../assets/svg/chevron-right-solid.svg';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { DatabaseType } from 'src/services/data_service';\r\n\r\ntype PropType = {\r\n  cards: StateType;\r\n  uid: string | null;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst List: React.FC<PropType> = ({ cards, uid, databaseService }) => {\r\n  const [fold, setFold] = useState(true);\r\n  const dispatch = useDispatch();\r\n  // const cards = useSelector((state: RootType) => state.todoReducer);\r\n  console.log(cards);\r\n  const addCard = () => {\r\n    const newId = Date.now();\r\n\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n\r\n    const today = `${year}-${month}-${day}`;\r\n\r\n    dispatch(addCardAction(String(newId), today));\r\n    databaseService.write(uid, String(newId), today);\r\n  };\r\n  const onFoldHandler = () => {\r\n    setFold((fold) => !fold);\r\n  };\r\n\r\n  return (\r\n    <ListContainer>\r\n      <EditorTitle fold={fold}>Plan your todos</EditorTitle>\r\n      <Container>\r\n        <EditorContainer fold={fold}>\r\n          <Droppable droppableId=\"cards\">\r\n            {(provided, snapshot) => (\r\n              <CardListContainer\r\n                className=\"cards\"\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                isDraggingOver={snapshot.isDraggingOver}\r\n              >\r\n                {cards.map((card, index) => (\r\n                  <Card\r\n                    key={card.id}\r\n                    cardId={card.id}\r\n                    todos={card.todos}\r\n                    current={card.current}\r\n                    index={index}\r\n                    uid={uid}\r\n                    databaseService={databaseService}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n              </CardListContainer>\r\n            )}\r\n          </Droppable>\r\n          <CardAddBtn onClick={addCard}>➕</CardAddBtn>\r\n        </EditorContainer>\r\n        <ArrowIcon as={fold ? LeftSVG : RightSVG} onClick={onFoldHandler} />\r\n      </Container>\r\n    </ListContainer>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.style.ts",["153"],"import styled from 'styled-components';\r\nimport { MainBackgroundColor } from '../../utils/css-utils';\r\n\r\nexport const ListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #c8e6c9;\r\n  overflow: auto;\r\n  &::-webkit-scrollbar {\r\n    /* 세로 스크롤 넓이 */\r\n    width: 8px;\r\n\r\n    /* 가로 스크롤 높이 */\r\n    height: 8px;\r\n\r\n    border-radius: 6px;\r\n    background: rgba(255, 255, 255, 0.4);\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    border-radius: 6px;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  padding-bottom: 20px;\r\n`;\r\nexport const EditorTitle = styled.h1<{ fold: boolean }>`\r\n  display: ${(props) => (props.fold ? 'inline' : 'none')};\r\n  text-align: center;\r\n`;\r\n\r\nexport const CardListContainer = styled.ul<{ isDraggingOver: boolean }>`\r\n  padding-left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const CardAddBtn = styled.button`\r\n  font-size: 30px;\r\n  background-color: transparent;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  margin: 0 0 20px 0;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nexport const EditorContainer = styled.div<{ fold: boolean }>`\r\n  width: ${(props) => (props.fold ? '300px' : '0')};\r\n  margin: 0;\r\n  padding-left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: width 100ms ease;\r\n  ${CardListContainer} {\r\n    display: ${(props) => (props.fold ? 'flex' : 'none')};\r\n  }\r\n  ${CardAddBtn} {\r\n    display: ${(props) => (props.fold ? 'flex' : 'none')};\r\n  }\r\n`;\r\nexport const ArrowIcon = styled.svg`\r\n  position: sticky;\r\n  top: 45%;\r\n  width: 20px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n  padding: 0 10px;\r\n`;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.tsx",["154","155"],"import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport * as S from './ReadCard.style';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleTodoAction, deleteCardAction } from '../../modules/todos';\r\nimport { DatabaseType } from 'src/services/data_service';\r\n\r\ntype PropType = {\r\n  currentId: string;\r\n  today: string;\r\n  todos: {\r\n    id: number;\r\n    thing: string;\r\n    checked: boolean;\r\n  }[];\r\n  uid: string | null;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst ReadCard: React.FC<PropType> = ({\r\n  currentId,\r\n  today,\r\n  todos,\r\n  uid,\r\n  databaseService,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleHandler = (id: number, checked: boolean) => () => {\r\n    dispatch(toggleTodoAction(currentId, id, !checked));\r\n    databaseService.toggleTodo(uid, currentId, id, !checked);\r\n  };\r\n\r\n  const deleteCardHandelr = () => {\r\n    dispatch(deleteCardAction(currentId));\r\n    databaseService.remove(uid, currentId);\r\n  };\r\n  return (\r\n    <Draggable key={currentId} draggableId={currentId} index={0}>\r\n      {(provided, snapshot) => (\r\n        <S.ReadCardContainer\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          isDragging={snapshot.isDragging}\r\n        >\r\n          <S.ReadCardHeader>\r\n            <S.ReadCardTitle>{today} 할일 목록</S.ReadCardTitle>\r\n            <S.CardDeleteBtn onClick={deleteCardHandelr}>\r\n              <S.TrashIcon />\r\n            </S.CardDeleteBtn>\r\n            <S.DragElement {...provided.dragHandleProps}>\r\n              <S.DragIcon />\r\n            </S.DragElement>\r\n          </S.ReadCardHeader>\r\n          <S.ReadCardListContainer>\r\n            {todos.map((todo) => (\r\n              <S.ReadCardList done={todo.checked} key={todo.id}>\r\n                <S.todoContent>{todo.thing}</S.todoContent>\r\n                <S.toggleBtn onClick={onToggleHandler(todo.id, todo.checked)}>\r\n                  {todo.checked ? 'uncheck' : 'check'}\r\n                </S.toggleBtn>\r\n              </S.ReadCardList>\r\n            ))}\r\n          </S.ReadCardListContainer>\r\n        </S.ReadCardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default ReadCard;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\data_service.ts",["156"],"import { firebaseDatabase } from './firebase';\r\nimport { StateType } from '../modules/todos';\r\n\r\n// type TodoType = {\r\n//   id: number;\r\n//   thing: string;\r\n//   checked: boolean;\r\n// }[];\r\n\r\n// type CardType = {\r\n//   id: string;\r\n//   current: boolean;\r\n//   today: string;\r\n//   todos: TodoType;\r\n// };\r\n\r\ntype CallbackType = (value: any) => void;\r\n\r\nexport type DatabaseType = {\r\n  write(uid: string | null, id: string, today: string): void;\r\n  writeTodo(uid: string | null, id: string, todoId: number, todo: string): void;\r\n  remove(uid: string | null, id: string): void;\r\n  removeTodo(uid: string | null, id: string, todoId: number): void;\r\n  updateTodo(\r\n    uid: string | null,\r\n    id: string,\r\n    todoId: number,\r\n    updateTodo: string\r\n  ): void;\r\n  toggleTodo(\r\n    uid: string | null,\r\n    id: string,\r\n    todoId: number,\r\n    checked: boolean\r\n  ): void;\r\n  updateCalendar(uid: string | null, id: string, today: string): void;\r\n  changeToStart(\r\n    uid: string | null,\r\n    id: string,\r\n    current: boolean,\r\n    prevCardId?: string\r\n  ): void;\r\n  dataSync(uid: string | null, update: CallbackType): any;\r\n  createUser(uid: string | null, userName: string): void;\r\n  updateTime(uid: string | null, time: number): void;\r\n  timeSync(uid: string | null, update: CallbackType): any;\r\n  getUserDatas(show: CallbackType): any;\r\n  getLoginUserData(uid: string | null, get: CallbackType): void;\r\n};\r\n\r\nexport default class Database {\r\n  write(uid: string | null, id: string, today: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).set({\r\n      id: id,\r\n      current: false,\r\n      today: today,\r\n      todos: '',\r\n    });\r\n  }\r\n\r\n  writeTodo(uid: string | null, id: string, todoId: number, todo: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).set({\r\n      id: todoId,\r\n      thing: todo,\r\n      checked: false,\r\n    });\r\n  }\r\n\r\n  remove(uid: string | null, id: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).remove();\r\n  }\r\n\r\n  removeTodo(uid: string | null, id: string, todoId: number) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).remove();\r\n  }\r\n\r\n  updateTodo(\r\n    uid: string | null,\r\n    id: string,\r\n    todoId: number,\r\n    updateTodo: string\r\n  ) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).update({\r\n      thing: updateTodo,\r\n    });\r\n  }\r\n\r\n  toggleTodo(uid: string | null, id: string, todoId: number, checked: boolean) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).update({\r\n      checked: checked,\r\n    });\r\n  }\r\n\r\n  updateCalendar(uid: string | null, id: string, today: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).update({\r\n      today: today,\r\n    });\r\n  }\r\n\r\n  changeToStart(\r\n    uid: string | null,\r\n    id: string,\r\n    current: boolean,\r\n    prevCardId?: string\r\n  ) {\r\n    prevCardId &&\r\n      firebaseDatabase.ref(`users/${uid}/${prevCardId}`).update({\r\n        current: !current,\r\n      });\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).update({\r\n      current: current,\r\n    });\r\n  }\r\n\r\n  dataSync(uid: string | null, update: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref(`users/${uid}`);\r\n    datasRef.on('value', (snapshot) => {\r\n      const value = snapshot.val();\r\n      update(value);\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n\r\n  createUser(uid: string | null, userName: string) {\r\n    firebaseDatabase.ref(`times/${uid}`).set({\r\n      userName: userName,\r\n      time: 0,\r\n    });\r\n  }\r\n\r\n  updateTime(uid: string | null, time: number) {\r\n    firebaseDatabase.ref(`times/${uid}`).update({\r\n      time: time,\r\n    });\r\n  }\r\n  timeSync(uid: string | null, update: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref(`times/${uid}`);\r\n    datasRef.on('value', (snapshot) => {\r\n      const time = snapshot.val().time;\r\n      update(time);\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n  getUserDatas(show: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref('times');\r\n    datasRef.on('value', (snapshot) => {\r\n      console.log(snapshot.val());\r\n      show(snapshot.val());\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n  getLoginUserData(uid: string | null, get: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref(`times`);\r\n    datasRef.once('value', (snapshop) => {\r\n      if (uid) {\r\n        console.log(snapshop.val()[uid]);\r\n        get(snapshop.val()[uid].userName);\r\n      }\r\n    });\r\n  }\r\n}\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Ranking\\Ranking.tsx",["157","158","159","160"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Ranking\\Ranking.style.ts",[],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":71,"column":6,"nodeType":"167","endLine":71,"endColumn":8,"suggestions":"168"},{"ruleId":"165","severity":1,"message":"169","line":62,"column":6,"nodeType":"167","endLine":62,"endColumn":23,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":31,"column":11,"nodeType":"173","messageId":"174","endLine":31,"endColumn":15},{"ruleId":"165","severity":1,"message":"175","line":51,"column":6,"nodeType":"167","endLine":51,"endColumn":8,"suggestions":"176"},{"ruleId":"165","severity":1,"message":"177","line":36,"column":6,"nodeType":"167","endLine":36,"endColumn":8,"suggestions":"178"},{"ruleId":"165","severity":1,"message":"177","line":30,"column":6,"nodeType":"167","endLine":30,"endColumn":8,"suggestions":"179"},{"ruleId":"171","severity":1,"message":"180","line":12,"column":10,"nodeType":"173","messageId":"174","endLine":12,"endColumn":21},{"ruleId":"171","severity":1,"message":"181","line":13,"column":10,"nodeType":"173","messageId":"174","endLine":13,"endColumn":18},{"ruleId":"171","severity":1,"message":"182","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":29},{"ruleId":"183","severity":1,"message":"184","line":58,"column":17,"nodeType":"185","endLine":58,"endColumn":32},{"ruleId":"183","severity":1,"message":"186","line":59,"column":17,"nodeType":"185","endLine":59,"endColumn":79},{"ruleId":"171","severity":1,"message":"187","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":19},{"ruleId":"165","severity":1,"message":"175","line":40,"column":6,"nodeType":"167","endLine":40,"endColumn":8,"suggestions":"188"},{"ruleId":"183","severity":1,"message":"189","line":49,"column":15,"nodeType":"185","endLine":49,"endColumn":26},{"ruleId":"183","severity":1,"message":"190","line":50,"column":15,"nodeType":"185","endLine":50,"endColumn":27},{"ruleId":"183","severity":1,"message":"191","line":51,"column":15,"nodeType":"185","endLine":51,"endColumn":27},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authService' and 'goToMain'. Either include them or remove the dependency array.","ArrayExpression",["194"],"React Hook useEffect has missing dependencies: 'authService', 'dispatch', 'history', and 'uid'. Either include them or remove the dependency array.",["195"],"@typescript-eslint/no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'databaseService'. Either include it or remove the dependency array.",["196"],"React Hook useEffect has missing dependencies: 'databaseService' and 'uid'. Either include them or remove the dependency array.",["197"],["198"],"'useSelector' is defined but never used.","'RootType' is defined but never used.","'MainBackgroundColor' is defined but never used.","react/jsx-pascal-case","Imported JSX component todoContent must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component toggleBtn must be in PascalCase or SCREAMING_SNAKE_CASE","'StateType' is defined but never used.",["199"],"Imported JSX component rankNum must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component rankName must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component rankTIme must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"206","fix":"208"},{"desc":"204","fix":"209"},"Update the dependencies array to be: [authService, goToMain]",{"range":"210","text":"211"},"Update the dependencies array to be: [authService, databaseService, dispatch, history, uid]",{"range":"212","text":"213"},"Update the dependencies array to be: [databaseService]",{"range":"214","text":"215"},"Update the dependencies array to be: [databaseService, uid]",{"range":"216","text":"217"},{"range":"218","text":"217"},{"range":"219","text":"215"},[1906,1908],"[authService, goToMain]",[2004,2021],"[authService, databaseService, dispatch, history, uid]",[1524,1526],"[databaseService]",[1242,1244],"[databaseService, uid]",[837,839],[1097,1099]]
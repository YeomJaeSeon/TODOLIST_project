[{"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\index.tsx":"1","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\reportWebVitals.ts":"2","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\App.tsx":"3","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.tsx":"4","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.tsx":"5","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.style.ts":"6","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\utils\\css-utils.ts":"7","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\auth_service.ts":"8","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\firebase.ts":"9","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.style.ts":"10","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.tsx":"11","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.tsx":"12","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.style.ts":"13","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.tsx":"14","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.style.ts":"15","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.style.ts":"16","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.tsx":"17","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.style.ts":"18","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.tsx":"19","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.tsx":"20","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.style.ts":"21","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\index.ts":"22","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\todos.ts":"23","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.tsx":"24","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.tsx":"25","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.style.ts":"26","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.style.ts":"27","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.style.ts":"28","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.tsx":"29","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.style.ts":"30","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\data_service.ts":"31"},{"size":950,"mtime":1613542090225,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1612327212632,"results":"34","hashOfConfig":"33"},{"size":910,"mtime":1614141882052,"results":"35","hashOfConfig":"33"},{"size":3151,"mtime":1613540460643,"results":"36","hashOfConfig":"33"},{"size":3785,"mtime":1614083584456,"results":"37","hashOfConfig":"33"},{"size":2353,"mtime":1612684084796,"results":"38","hashOfConfig":"33"},{"size":276,"mtime":1612684073845,"results":"39","hashOfConfig":"33"},{"size":1083,"mtime":1613542513463,"results":"40","hashOfConfig":"33"},{"size":784,"mtime":1613538971249,"results":"41","hashOfConfig":"33"},{"size":145,"mtime":1612430949335,"results":"42","hashOfConfig":"33"},{"size":1679,"mtime":1613623677372,"results":"43","hashOfConfig":"33"},{"size":5739,"mtime":1614150194865,"results":"44","hashOfConfig":"33"},{"size":1705,"mtime":1612684096233,"results":"45","hashOfConfig":"33"},{"size":3339,"mtime":1613624955687,"results":"46","hashOfConfig":"33"},{"size":1654,"mtime":1613367719512,"results":"47","hashOfConfig":"33"},{"size":534,"mtime":1612498497364,"results":"48","hashOfConfig":"33"},{"size":1535,"mtime":1613625244834,"results":"49","hashOfConfig":"33"},{"size":155,"mtime":1612506051287,"results":"50","hashOfConfig":"33"},{"size":1381,"mtime":1614148525414,"results":"51","hashOfConfig":"33"},{"size":2438,"mtime":1614148209434,"results":"52","hashOfConfig":"33"},{"size":745,"mtime":1613529058171,"results":"53","hashOfConfig":"33"},{"size":224,"mtime":1613290070010,"results":"54","hashOfConfig":"33"},{"size":5889,"mtime":1614082992383,"results":"55","hashOfConfig":"33"},{"size":812,"mtime":1614141630848,"results":"56","hashOfConfig":"33"},{"size":2680,"mtime":1613818330102,"results":"57","hashOfConfig":"33"},{"size":1780,"mtime":1613538711642,"results":"58","hashOfConfig":"33"},{"size":641,"mtime":1613371968528,"results":"59","hashOfConfig":"33"},{"size":697,"mtime":1613371337278,"results":"60","hashOfConfig":"33"},{"size":2171,"mtime":1613624472579,"results":"61","hashOfConfig":"33"},{"size":1744,"mtime":1613371229707,"results":"62","hashOfConfig":"33"},{"size":3826,"mtime":1614148815182,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"12vozf8",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"66"},"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\index.tsx",[],["135","136"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\reportWebVitals.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\App.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.tsx",["137"],"import React, { useEffect, useRef } from 'react';\r\nimport {\r\n  LoginContainer,\r\n  ContentContainer,\r\n  TextContainer,\r\n  Title,\r\n  Description,\r\n  FormContainer,\r\n  FormTitle,\r\n  InputText,\r\n  Button,\r\n  SignUpContainer,\r\n  SignUpText,\r\n  SignUpButton,\r\n  Footer,\r\n} from './Login.style';\r\nimport { AuthServiceType } from '../../services/auth_service';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthType } from '../../services/firebase';\r\n\r\ntype PropType = {\r\n  authService: AuthServiceType;\r\n};\r\nconst Login = ({ authService }: PropType) => {\r\n  const emailRef = useRef<HTMLInputElement>(null);\r\n  const pwdRef = useRef<HTMLInputElement>(null);\r\n  const history = useHistory();\r\n\r\n  const loginHandler = () => {\r\n    const email = emailRef.current && emailRef.current.value;\r\n    const pwd = pwdRef.current && pwdRef.current.value;\r\n    if (email && pwd) {\r\n      authService\r\n        .login(email, pwd)\r\n        .then((value) => {\r\n          alert('로그인 성공');\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.code);\r\n          if (err.code === 'auth/user-not-found') {\r\n            alert('존재하지 않는 아이디입니다.');\r\n          } else if (err.code === 'auth/invalid-email') {\r\n            alert('잘못된 이메일 형식입니다.');\r\n          } else if (err.code === 'auth/wrong-password') {\r\n            alert('잘못된 비밀번호입니다.');\r\n          } else if (err.code === 'auth/too-many-requests') {\r\n            alert('너무많이 틀렸습니다. 잠시후 시도해주세요');\r\n          } else {\r\n            alert(err.message);\r\n          }\r\n        });\r\n    } else {\r\n      alert('이메일이나 비밀번호를 입력해주세요');\r\n    }\r\n  };\r\n\r\n  const goToMain = (uid: string) => {\r\n    history.push({\r\n      pathname: '/main',\r\n      state: { id: uid },\r\n    });\r\n  };\r\n\r\n  const goToSignUp = () => {\r\n    history.push('/signup');\r\n  };\r\n  useEffect(() => {\r\n    authService.onAuthStatus((user: AuthType) => {\r\n      user && goToMain(user.uid);\r\n    });\r\n  }, []);\r\n  return (\r\n    <LoginContainer>\r\n      <ContentContainer>\r\n        <TextContainer>\r\n          <Title>todo list 🏃‍♂️🏃‍♀️🏃‍♂🏃‍♀️</Title>\r\n          <Description>What is your first small step🦶?</Description>\r\n        </TextContainer>\r\n        <FormContainer onSubmit={(e) => e.preventDefault()}>\r\n          <FormTitle>Please Login</FormTitle>\r\n          <InputText\r\n            ref={emailRef}\r\n            type=\"text\"\r\n            placeholder=\"이메일 입력해주세요.\"\r\n          />\r\n          <InputText\r\n            ref={pwdRef}\r\n            type=\"password\"\r\n            placeholder=\"비밀번호 입력해주세요.\"\r\n          />\r\n          <Button onClick={loginHandler}>Login</Button>\r\n          <SignUpContainer>\r\n            <SignUpText>처음 방문하셨나요?</SignUpText>\r\n            <SignUpButton onClick={goToSignUp}>Sign Up</SignUpButton>\r\n          </SignUpContainer>\r\n        </FormContainer>\r\n      </ContentContainer>\r\n      <Footer>Show your passion!!🥇🥇🥇</Footer>\r\n    </LoginContainer>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.tsx",["138"],"import React, { useEffect } from 'react';\r\nimport { AuthServiceType } from '../../services/auth_service';\r\nimport { DatabaseType } from '../../services/data_service';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { MainContainer } from './Main.style';\r\nimport List from 'src/components/List/List';\r\nimport StartPlan from 'src/components/StartPlan/StartPlan';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootType } from '../../modules/index';\r\nimport {\r\n  initCardAction,\r\n  sameChangeCardAction,\r\n  diffChangeCardAction,\r\n} from 'src/modules/todos';\r\n\r\ntype LocationState = {\r\n  id: string;\r\n};\r\n\r\ntype PropType = {\r\n  authService: AuthServiceType;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst Main = ({ authService, databaseService }: PropType) => {\r\n  const cards = useSelector((state: RootType) => state.todoReducer);\r\n\r\n  const dispatch = useDispatch();\r\n  const location = useLocation<LocationState>();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    console.log('mounted');\r\n    const stopSync = databaseService.dataSync(\r\n      location.state.id,\r\n      (value: any) => {\r\n        console.log(value);\r\n        if (!value) dispatch(initCardAction([]));\r\n        else {\r\n          const initState = Object.keys(value).map((key: string) => ({\r\n            id: key,\r\n            current: value[key].current,\r\n            today: value[key].today,\r\n            todos: value[key].todos\r\n              ? Object.keys(value[key].todos).map((todoKey) => ({\r\n                  id: value[key].todos[todoKey].id,\r\n                  thing: value[key].todos[todoKey].thing,\r\n                  checked: value[key].todos[todoKey].checked,\r\n                }))\r\n              : [],\r\n          }));\r\n          dispatch(initCardAction(initState));\r\n        }\r\n      }\r\n    );\r\n\r\n    authService.onAuthStatus((user) => {\r\n      if (!user) {\r\n        history.push('/');\r\n      }\r\n    });\r\n    return () => stopSync();\r\n  }, [databaseService]);\r\n\r\n  const logoutHandler = () => {\r\n    authService.logout();\r\n  };\r\n\r\n  const cardChangeHandler = (result: DropResult) => {\r\n    const { source, destination } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (source.droppableId === destination.droppableId) {\r\n      const newCards = [...cards];\r\n      const [reorderedItem] = newCards.splice(source.index, 1);\r\n      newCards.splice(destination.index, 0, reorderedItem);\r\n\r\n      dispatch(sameChangeCardAction(newCards));\r\n    } else {\r\n      const selectedCard = cards.find((card) => card.id === result.draggableId);\r\n      const prevCard = cards.find((card) => card.current);\r\n\r\n      if (selectedCard) {\r\n        if (\r\n          selectedCard?.todos.length === 0 &&\r\n          destination.droppableId === 'card'\r\n        )\r\n          alert('할일을 먼저 입력해주세요!');\r\n        else {\r\n          dispatch(\r\n            diffChangeCardAction(\r\n              result.draggableId,\r\n              source.index,\r\n              destination.index\r\n            )\r\n          );\r\n          databaseService.changeToStart(\r\n            location.state.id,\r\n            result.draggableId,\r\n            !selectedCard.current,\r\n            prevCard && prevCard.id\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainContainer>\r\n      <DragDropContext onDragEnd={cardChangeHandler}>\r\n        <List\r\n          cards={cards}\r\n          uid={location.state.id}\r\n          databaseService={databaseService}\r\n        />\r\n        <StartPlan\r\n          logout={logoutHandler}\r\n          uid={location.state.id}\r\n          databaseService={databaseService}\r\n        />\r\n      </DragDropContext>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\utils\\css-utils.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\auth_service.ts",["139"],"import { AuthType, SinUpType, firebaseAuth, GoogleProvider } from './firebase';\r\n\r\nexport type AuthServiceType = {\r\n  signUp(email: string, password: string): SinUpType;\r\n  login(email: string, password: string): SinUpType;\r\n  onAuthStatus(callback: (user: AuthType) => void): void;\r\n  logout(): void;\r\n};\r\n\r\nexport default class AuthService {\r\n  signUp(email: string, password: string) {\r\n    return firebaseAuth.createUserWithEmailAndPassword(email, password);\r\n  }\r\n  login(email: string, password: string) {\r\n    return firebaseAuth.signInWithEmailAndPassword(email, password);\r\n  }\r\n  createProvider(provider: string) {\r\n    switch (provider) {\r\n      case 'Google':\r\n        return GoogleProvider;\r\n      default:\r\n        throw new Error(`${provider}: 적절치 못한 로그인 시도입니다.`);\r\n    }\r\n  }\r\n  onAuthStatus(callback: (user: AuthType) => void) {\r\n    firebaseAuth.onAuthStateChanged((user: AuthType) => {\r\n      callback(user);\r\n    });\r\n  }\r\n  isUser() {\r\n    const user = firebaseAuth.currentUser;\r\n  }\r\n  logout() {\r\n    firebaseAuth.signOut();\r\n  }\r\n}\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\firebase.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.tsx",["140"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.tsx",["141"],"import React, { useState, useEffect } from 'react';\r\nimport * as S from './PlanTimer.style';\r\nimport { ReactComponent as PlaySVG } from '../../assets/svg/play-solid.svg';\r\nimport { ReactComponent as StopSVG } from '../../assets/svg/stop-solid.svg';\r\nimport { ReactComponent as PauseSVG } from '../../assets/svg/pause-solid.svg';\r\nimport { DatabaseType } from 'src/services/data_service';\r\n\r\nlet TimerVal: NodeJS.Timeout;\r\n\r\nconst hours = (time: number): string | number =>\r\n  Math.floor(time / 3600) > 9\r\n    ? Math.floor(time / 3600)\r\n    : `0${Math.floor(time / 3600)}`;\r\nconst minutes = (time: number): string | number =>\r\n  Math.floor(time / 60) % 60 > 9\r\n    ? Math.floor(time / 60) % 60\r\n    : `0${Math.floor(time / 60) % 60}`;\r\nconst seconds = (time: number): string | number =>\r\n  time % 60 > 9 ? time % 60 : `0${time % 60}`;\r\n\r\ntype PropType = {\r\n  uid: string;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst PlanTimer: React.FC<PropType> = ({ uid, databaseService }) => {\r\n  const [time, setTime] = useState(0);\r\n  const [state, setState] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timeSync = databaseService.timeSync(uid, (time) => {\r\n      if (time) setTime(+time);\r\n    });\r\n\r\n    return () => timeSync();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => stop();\r\n    // clean up함수로 메모리 누수방지\r\n  }, []);\r\n\r\n  const start = () => {\r\n    setState(true);\r\n    TimerVal = setInterval(() => {\r\n      setTime((time) => {\r\n        databaseService.updateTime(uid, time + 1);\r\n        return time + 1;\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  const startOrStop = () => {\r\n    if (state === false) {\r\n      start();\r\n    } else {\r\n      stop();\r\n    }\r\n  };\r\n\r\n  const stop = () => {\r\n    setState(false);\r\n    clearInterval(TimerVal);\r\n  };\r\n\r\n  const reset = () => {\r\n    stop();\r\n    setTime(0);\r\n    databaseService.updateTime(uid, 0);\r\n  };\r\n\r\n  return (\r\n    <S.PlanTimerContainer>\r\n      <S.TimerTitleContainer>TIMER 🕒</S.TimerTitleContainer>\r\n      <S.TimerContainer>\r\n        <S.TimeSection>\r\n          {hours(time)} : {minutes(time)} : {seconds(time)}\r\n        </S.TimeSection>\r\n        <S.Btns onClick={startOrStop}>\r\n          {!state ? <S.Icon as={PlaySVG} /> : <S.Icon as={PauseSVG} />}\r\n        </S.Btns>\r\n        <S.Btns onClick={reset}>\r\n          <S.Icon as={StopSVG} />\r\n        </S.Btns>\r\n      </S.TimerContainer>\r\n    </S.PlanTimerContainer>\r\n  );\r\n};\r\n\r\nexport default PlanTimer;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\index.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\todos.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.tsx",["142","143"],"import React, { useState } from 'react';\r\nimport Card from '../Card/Card';\r\nimport {\r\n  ListContainer,\r\n  Container,\r\n  EditorContainer,\r\n  ArrowIcon,\r\n  EditorTitle,\r\n  CardListContainer,\r\n  CardAddBtn,\r\n} from './List.style';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootType } from '../../modules/index';\r\nimport { addCardAction, StateType } from '../../modules/todos';\r\nimport { ReactComponent as LeftSVG } from '../../assets/svg/chevron-left-solid.svg';\r\nimport { ReactComponent as RightSVG } from '../../assets/svg/chevron-right-solid.svg';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { DatabaseType } from 'src/services/data_service';\r\n\r\ntype PropType = {\r\n  cards: StateType;\r\n  uid: string;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst List: React.FC<PropType> = ({ cards, uid, databaseService }) => {\r\n  const [fold, setFold] = useState(true);\r\n  const dispatch = useDispatch();\r\n  // const cards = useSelector((state: RootType) => state.todoReducer);\r\n  console.log(cards);\r\n  const addCard = () => {\r\n    const newId = Date.now();\r\n\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n\r\n    const today = `${year}-${month}-${day}`;\r\n\r\n    dispatch(addCardAction(String(newId), today));\r\n    databaseService.write(uid, String(newId), today);\r\n  };\r\n  const onFoldHandler = () => {\r\n    setFold((fold) => !fold);\r\n  };\r\n\r\n  return (\r\n    <ListContainer>\r\n      <EditorTitle fold={fold}>Plan your todos</EditorTitle>\r\n      <Container>\r\n        <EditorContainer fold={fold}>\r\n          <Droppable droppableId=\"cards\">\r\n            {(provided, snapshot) => (\r\n              <CardListContainer\r\n                className=\"cards\"\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                isDraggingOver={snapshot.isDraggingOver}\r\n              >\r\n                {cards.map((card, index) => (\r\n                  <Card\r\n                    key={card.id}\r\n                    cardId={card.id}\r\n                    todos={card.todos}\r\n                    current={card.current}\r\n                    index={index}\r\n                    uid={uid}\r\n                    databaseService={databaseService}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n              </CardListContainer>\r\n            )}\r\n          </Droppable>\r\n          <CardAddBtn onClick={addCard}>➕</CardAddBtn>\r\n        </EditorContainer>\r\n        <ArrowIcon as={fold ? LeftSVG : RightSVG} onClick={onFoldHandler} />\r\n      </Container>\r\n    </ListContainer>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.style.ts",["144"],"import styled from 'styled-components';\r\nimport { MainBackgroundColor } from '../../utils/css-utils';\r\n\r\nexport const ListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #c8e6c9;\r\n  overflow: auto;\r\n  &::-webkit-scrollbar {\r\n    /* 세로 스크롤 넓이 */\r\n    width: 8px;\r\n\r\n    /* 가로 스크롤 높이 */\r\n    height: 8px;\r\n\r\n    border-radius: 6px;\r\n    background: rgba(255, 255, 255, 0.4);\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    border-radius: 6px;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  padding-bottom: 20px;\r\n`;\r\nexport const EditorTitle = styled.h1<{ fold: boolean }>`\r\n  display: ${(props) => (props.fold ? 'inline' : 'none')};\r\n  text-align: center;\r\n`;\r\n\r\nexport const CardListContainer = styled.ul<{ isDraggingOver: boolean }>`\r\n  padding-left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const CardAddBtn = styled.button`\r\n  font-size: 30px;\r\n  background-color: transparent;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  margin: 0 0 20px 0;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nexport const EditorContainer = styled.div<{ fold: boolean }>`\r\n  width: ${(props) => (props.fold ? '300px' : '0')};\r\n  margin: 0;\r\n  padding-left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: width 100ms ease;\r\n  ${CardListContainer} {\r\n    display: ${(props) => (props.fold ? 'flex' : 'none')};\r\n  }\r\n  ${CardAddBtn} {\r\n    display: ${(props) => (props.fold ? 'flex' : 'none')};\r\n  }\r\n`;\r\nexport const ArrowIcon = styled.svg`\r\n  position: sticky;\r\n  top: 45%;\r\n  width: 20px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n  padding: 0 10px;\r\n`;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.tsx",["145","146"],"import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport * as S from './ReadCard.style';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleTodoAction, deleteCardAction } from '../../modules/todos';\r\nimport { DatabaseType } from 'src/services/data_service';\r\n\r\ntype PropType = {\r\n  currentId: string;\r\n  today: string;\r\n  todos: {\r\n    id: number;\r\n    thing: string;\r\n    checked: boolean;\r\n  }[];\r\n  uid: string;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst ReadCard: React.FC<PropType> = ({\r\n  currentId,\r\n  today,\r\n  todos,\r\n  uid,\r\n  databaseService,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleHandler = (id: number, checked: boolean) => () => {\r\n    dispatch(toggleTodoAction(currentId, id, !checked));\r\n    databaseService.toggleTodo(uid, currentId, id, !checked);\r\n  };\r\n\r\n  const deleteCardHandelr = () => {\r\n    dispatch(deleteCardAction(currentId));\r\n    databaseService.remove(uid, currentId);\r\n  };\r\n  return (\r\n    <Draggable key={currentId} draggableId={currentId} index={0}>\r\n      {(provided, snapshot) => (\r\n        <S.ReadCardContainer\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          isDragging={snapshot.isDragging}\r\n        >\r\n          <S.ReadCardHeader>\r\n            <S.ReadCardTitle>{today} 할일 목록</S.ReadCardTitle>\r\n            <S.CardDeleteBtn onClick={deleteCardHandelr}>\r\n              <S.TrashIcon />\r\n            </S.CardDeleteBtn>\r\n            <S.DragElement {...provided.dragHandleProps}>\r\n              <S.DragIcon />\r\n            </S.DragElement>\r\n          </S.ReadCardHeader>\r\n          <S.ReadCardListContainer>\r\n            {todos.map((todo) => (\r\n              <S.ReadCardList done={todo.checked} key={todo.id}>\r\n                <S.todoContent>{todo.thing}</S.todoContent>\r\n                <S.toggleBtn onClick={onToggleHandler(todo.id, todo.checked)}>\r\n                  {todo.checked ? 'uncheck' : 'check'}\r\n                </S.toggleBtn>\r\n              </S.ReadCardList>\r\n            ))}\r\n          </S.ReadCardListContainer>\r\n        </S.ReadCardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default ReadCard;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\data_service.ts",["147"],"import { firebaseDatabase } from './firebase';\r\nimport { StateType } from '../modules/todos';\r\n\r\n// type TodoType = {\r\n//   id: number;\r\n//   thing: string;\r\n//   checked: boolean;\r\n// }[];\r\n\r\n// type CardType = {\r\n//   id: string;\r\n//   current: boolean;\r\n//   today: string;\r\n//   todos: TodoType;\r\n// };\r\n\r\ntype CallbackType = (value: any) => void;\r\n\r\nexport type DatabaseType = {\r\n  write(uid: string, id: string, today: string): void;\r\n  writeTodo(uid: string, id: string, todoId: number, todo: string): void;\r\n  remove(uid: string, id: string): void;\r\n  removeTodo(uid: string, id: string, todoId: number): void;\r\n  updateTodo(uid: string, id: string, todoId: number, updateTodo: string): void;\r\n  toggleTodo(uid: string, id: string, todoId: number, checked: boolean): void;\r\n  updateCalendar(uid: string, id: string, today: string): void;\r\n  changeToStart(\r\n    uid: string,\r\n    id: string,\r\n    current: boolean,\r\n    prevCardId?: string\r\n  ): void;\r\n  dataSync(uid: string, update: CallbackType): any;\r\n  createUser(uid: string, userName: string): void;\r\n  updateTime(uid: string, time: number): void;\r\n  timeSync(uid: string, update: CallbackType): any;\r\n  getUserDatas(show: CallbackType): any;\r\n};\r\n\r\nexport default class Database {\r\n  write(uid: string, id: string, today: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).set({\r\n      id: id,\r\n      current: false,\r\n      today: today,\r\n      todos: '',\r\n    });\r\n  }\r\n\r\n  writeTodo(uid: string, id: string, todoId: number, todo: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).set({\r\n      id: todoId,\r\n      thing: todo,\r\n      checked: false,\r\n    });\r\n  }\r\n\r\n  remove(uid: string, id: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).remove();\r\n  }\r\n\r\n  removeTodo(uid: string, id: string, todoId: number) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).remove();\r\n  }\r\n\r\n  updateTodo(uid: string, id: string, todoId: number, updateTodo: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).update({\r\n      thing: updateTodo,\r\n    });\r\n  }\r\n\r\n  toggleTodo(uid: string, id: string, todoId: number, checked: boolean) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).update({\r\n      checked: checked,\r\n    });\r\n  }\r\n\r\n  updateCalendar(uid: string, id: string, today: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).update({\r\n      today: today,\r\n    });\r\n  }\r\n\r\n  changeToStart(\r\n    uid: string,\r\n    id: string,\r\n    current: boolean,\r\n    prevCardId?: string\r\n  ) {\r\n    prevCardId &&\r\n      firebaseDatabase.ref(`users/${uid}/${prevCardId}`).update({\r\n        current: !current,\r\n      });\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).update({\r\n      current: current,\r\n    });\r\n  }\r\n\r\n  dataSync(uid: string, update: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref(`users/${uid}`);\r\n    datasRef.on('value', (snapshot) => {\r\n      const value = snapshot.val();\r\n      update(value);\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n\r\n  createUser(uid: string, userName: string) {\r\n    firebaseDatabase.ref(`times/${uid}`).set({\r\n      userName: userName,\r\n      time: 0,\r\n    });\r\n  }\r\n\r\n  updateTime(uid: string, time: number) {\r\n    firebaseDatabase.ref(`times/${uid}`).update({\r\n      time: time,\r\n    });\r\n  }\r\n  timeSync(uid: string, update: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref(`times/${uid}`);\r\n    datasRef.on('value', (snapshot) => {\r\n      const time = snapshot.val().time;\r\n      update(time);\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n  getUserDatas(show: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref('times');\r\n    datasRef.on('value', (snapshot) => {\r\n      console.log(snapshot.val());\r\n      show(snapshot.val());\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n}\r\n",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":71,"column":6,"nodeType":"154","endLine":71,"endColumn":8,"suggestions":"155"},{"ruleId":"152","severity":1,"message":"156","line":65,"column":6,"nodeType":"154","endLine":65,"endColumn":23,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":31,"column":11,"nodeType":"160","messageId":"161","endLine":31,"endColumn":15},{"ruleId":"152","severity":1,"message":"162","line":51,"column":6,"nodeType":"154","endLine":51,"endColumn":8,"suggestions":"163"},{"ruleId":"152","severity":1,"message":"164","line":36,"column":6,"nodeType":"154","endLine":36,"endColumn":8,"suggestions":"165"},{"ruleId":"158","severity":1,"message":"166","line":12,"column":10,"nodeType":"160","messageId":"161","endLine":12,"endColumn":21},{"ruleId":"158","severity":1,"message":"167","line":13,"column":10,"nodeType":"160","messageId":"161","endLine":13,"endColumn":18},{"ruleId":"158","severity":1,"message":"168","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":58,"column":17,"nodeType":"171","endLine":58,"endColumn":32},{"ruleId":"169","severity":1,"message":"172","line":59,"column":17,"nodeType":"171","endLine":59,"endColumn":79},{"ruleId":"158","severity":1,"message":"173","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":19},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authService' and 'goToMain'. Either include them or remove the dependency array.","ArrayExpression",["176"],"React Hook useEffect has missing dependencies: 'authService', 'dispatch', 'history', and 'location.state.id'. Either include them or remove the dependency array.",["177"],"@typescript-eslint/no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'databaseService'. Either include it or remove the dependency array.",["178"],"React Hook useEffect has missing dependencies: 'databaseService' and 'uid'. Either include them or remove the dependency array.",["179"],"'useSelector' is defined but never used.","'RootType' is defined but never used.","'MainBackgroundColor' is defined but never used.","react/jsx-pascal-case","Imported JSX component todoContent must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component toggleBtn must be in PascalCase or SCREAMING_SNAKE_CASE","'StateType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [authService, goToMain]",{"range":"188","text":"189"},"Update the dependencies array to be: [authService, databaseService, dispatch, history, location.state.id]",{"range":"190","text":"191"},"Update the dependencies array to be: [databaseService]",{"range":"192","text":"193"},"Update the dependencies array to be: [databaseService, uid]",{"range":"194","text":"195"},[1906,1908],"[authService, goToMain]",[2039,2056],"[authService, databaseService, dispatch, history, location.state.id]",[1524,1526],"[databaseService]",[1235,1237],"[databaseService, uid]"]
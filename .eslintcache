[{"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\index.tsx":"1","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\reportWebVitals.ts":"2","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\App.tsx":"3","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.tsx":"4","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.tsx":"5","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.style.ts":"6","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\utils\\css-utils.ts":"7","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\auth_service.ts":"8","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\firebase.ts":"9","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.style.ts":"10","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.tsx":"11","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.tsx":"12","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.style.ts":"13","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.tsx":"14","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.style.ts":"15","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.style.ts":"16","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.tsx":"17","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.style.ts":"18","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.tsx":"19","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.tsx":"20","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.style.ts":"21","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\index.ts":"22","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\todos.ts":"23","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.tsx":"24","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.tsx":"25","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.style.ts":"26","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.style.ts":"27","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.style.ts":"28","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.tsx":"29","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.style.ts":"30"},{"size":828,"mtime":1612602711510,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":1612327212632,"results":"33","hashOfConfig":"32"},{"size":736,"mtime":1612369090395,"results":"34","hashOfConfig":"32"},{"size":3151,"mtime":1612676519754,"results":"35","hashOfConfig":"32"},{"size":2155,"mtime":1613290367320,"results":"36","hashOfConfig":"32"},{"size":2353,"mtime":1612684084796,"results":"37","hashOfConfig":"32"},{"size":276,"mtime":1612684073845,"results":"38","hashOfConfig":"32"},{"size":1083,"mtime":1612410996266,"results":"39","hashOfConfig":"32"},{"size":623,"mtime":1612369059931,"results":"40","hashOfConfig":"32"},{"size":145,"mtime":1612430949335,"results":"41","hashOfConfig":"32"},{"size":1401,"mtime":1612608825383,"results":"42","hashOfConfig":"32"},{"size":4764,"mtime":1613049383214,"results":"43","hashOfConfig":"32"},{"size":1705,"mtime":1612684096233,"results":"44","hashOfConfig":"32"},{"size":2859,"mtime":1613367577543,"results":"45","hashOfConfig":"32"},{"size":1654,"mtime":1613367719512,"results":"46","hashOfConfig":"32"},{"size":534,"mtime":1612498497364,"results":"47","hashOfConfig":"32"},{"size":1632,"mtime":1613283880805,"results":"48","hashOfConfig":"32"},{"size":155,"mtime":1612506051287,"results":"49","hashOfConfig":"32"},{"size":1139,"mtime":1613284183949,"results":"50","hashOfConfig":"32"},{"size":1967,"mtime":1613529126014,"results":"51","hashOfConfig":"32"},{"size":745,"mtime":1613529058171,"results":"52","hashOfConfig":"32"},{"size":224,"mtime":1613290070010,"results":"53","hashOfConfig":"32"},{"size":5696,"mtime":1613369746063,"results":"54","hashOfConfig":"32"},{"size":593,"mtime":1613371900970,"results":"55","hashOfConfig":"32"},{"size":2329,"mtime":1613370067697,"results":"56","hashOfConfig":"32"},{"size":1466,"mtime":1613370184617,"results":"57","hashOfConfig":"32"},{"size":641,"mtime":1613371968528,"results":"58","hashOfConfig":"32"},{"size":697,"mtime":1613371337278,"results":"59","hashOfConfig":"32"},{"size":1873,"mtime":1613372025843,"results":"60","hashOfConfig":"32"},{"size":1744,"mtime":1613371229707,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"12vozf8",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\index.tsx",[],["129","130"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\reportWebVitals.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\App.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.tsx",["131"],"import React, { useEffect, useRef } from 'react';\r\nimport {\r\n  LoginContainer,\r\n  ContentContainer,\r\n  TextContainer,\r\n  Title,\r\n  Description,\r\n  FormContainer,\r\n  FormTitle,\r\n  InputText,\r\n  Button,\r\n  SignUpContainer,\r\n  SignUpText,\r\n  SignUpButton,\r\n  Footer,\r\n} from './Login.style';\r\nimport { AuthServiceType } from '../../services/auth_service';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AuthType } from '../../services/firebase';\r\n\r\ntype PropType = {\r\n  authService: AuthServiceType;\r\n};\r\nconst Login = ({ authService }: PropType) => {\r\n  const emailRef = useRef<HTMLInputElement>(null);\r\n  const pwdRef = useRef<HTMLInputElement>(null);\r\n  const history = useHistory();\r\n\r\n  const loginHandler = () => {\r\n    const email = emailRef.current && emailRef.current.value;\r\n    const pwd = pwdRef.current && pwdRef.current.value;\r\n    if (email && pwd) {\r\n      authService\r\n        .login(email, pwd)\r\n        .then((value) => {\r\n          alert('로그인 성공');\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.code);\r\n          if (err.code === 'auth/user-not-found') {\r\n            alert('존재하지 않는 아이디입니다.');\r\n          } else if (err.code === 'auth/invalid-email') {\r\n            alert('잘못된 이메일 형식입니다.');\r\n          } else if (err.code === 'auth/wrong-password') {\r\n            alert('잘못된 비밀번호입니다.');\r\n          } else if (err.code === 'auth/too-many-requests') {\r\n            alert('너무많이 틀렸습니다. 잠시후 시도해주세요');\r\n          } else {\r\n            alert(err.message);\r\n          }\r\n        });\r\n    } else {\r\n      alert('이메일이나 비밀번호를 입력해주세요');\r\n    }\r\n  };\r\n\r\n  const goToMain = (uid: string) => {\r\n    history.push({\r\n      pathname: '/main',\r\n      state: { id: uid },\r\n    });\r\n  };\r\n\r\n  const goToSignUp = () => {\r\n    history.push('/signup');\r\n  };\r\n  useEffect(() => {\r\n    authService.onAuthStatus((user: AuthType) => {\r\n      user && goToMain(user.uid);\r\n    });\r\n  }, []);\r\n  return (\r\n    <LoginContainer>\r\n      <ContentContainer>\r\n        <TextContainer>\r\n          <Title>todo list 🏃‍♂️🏃‍♀️🏃‍♂🏃‍♀️</Title>\r\n          <Description>What is your first small step🦶?</Description>\r\n        </TextContainer>\r\n        <FormContainer onSubmit={(e) => e.preventDefault()}>\r\n          <FormTitle>Please Login</FormTitle>\r\n          <InputText\r\n            ref={emailRef}\r\n            type=\"text\"\r\n            placeholder=\"이메일 입력해주세요.\"\r\n          />\r\n          <InputText\r\n            ref={pwdRef}\r\n            type=\"password\"\r\n            placeholder=\"비밀번호 입력해주세요.\"\r\n          />\r\n          <Button onClick={loginHandler}>Login</Button>\r\n          <SignUpContainer>\r\n            <SignUpText>처음 방문하셨나요?</SignUpText>\r\n            <SignUpButton onClick={goToSignUp}>Sign Up</SignUpButton>\r\n          </SignUpContainer>\r\n        </FormContainer>\r\n      </ContentContainer>\r\n      <Footer>Show your passion!!🥇🥇🥇</Footer>\r\n    </LoginContainer>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.tsx",["132"],"import React, { useEffect } from 'react';\r\nimport { AuthServiceType } from '../../services/auth_service';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { MainContainer } from './Main.style';\r\nimport List from 'src/components/List/List';\r\nimport StartPlan from 'src/components/StartPlan/StartPlan';\r\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootType } from '../../modules/index';\r\nimport { sameChangeCardAction, diffChangeCardAction } from 'src/modules/todos';\r\n\r\ntype PropType = {\r\n  authService: AuthServiceType;\r\n};\r\n\r\nconst Main = ({ authService }: PropType) => {\r\n  const cards = useSelector((state: RootType) => state.todoReducer);\r\n\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  console.log(location.state);\r\n  //  로그인한 사람의 uid를받음\r\n\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    authService.onAuthStatus((user) => {\r\n      if (!user) {\r\n        history.push('/');\r\n      }\r\n    });\r\n  }, []);\r\n  const logoutHandler = () => {\r\n    authService.logout();\r\n  };\r\n\r\n  const cardChangeHandler = (result: DropResult) => {\r\n    console.log(result);\r\n    const { source, destination } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (source.droppableId === destination.droppableId) {\r\n      dispatch(sameChangeCardAction(source.index, destination.index));\r\n    } else {\r\n      const selectedCard = cards.find((card) => card.id === result.draggableId);\r\n      if (selectedCard)\r\n        selectedCard?.todos.length === 0 && destination.droppableId === 'card'\r\n          ? alert('할일을 먼저 입력해주세요!')\r\n          : dispatch(\r\n              diffChangeCardAction(\r\n                result.draggableId,\r\n                source.index,\r\n                destination.index\r\n              )\r\n            );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainContainer>\r\n      <DragDropContext onDragEnd={cardChangeHandler}>\r\n        <List />\r\n        <StartPlan logout={logoutHandler} />\r\n      </DragDropContext>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\utils\\css-utils.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\auth_service.ts",["133"],"import { AuthType, SinUpType, firebaseAuth, GoogleProvider } from './firebase';\r\n\r\nexport type AuthServiceType = {\r\n  signUp(email: string, password: string): SinUpType;\r\n  login(email: string, password: string): SinUpType;\r\n  onAuthStatus(callback: (user: AuthType) => void): void;\r\n  logout(): void;\r\n};\r\n\r\nexport default class AuthService {\r\n  signUp(email: string, password: string) {\r\n    return firebaseAuth.createUserWithEmailAndPassword(email, password);\r\n  }\r\n  login(email: string, password: string) {\r\n    return firebaseAuth.signInWithEmailAndPassword(email, password);\r\n  }\r\n  createProvider(provider: string) {\r\n    switch (provider) {\r\n      case 'Google':\r\n        return GoogleProvider;\r\n      default:\r\n        throw new Error(`${provider}: 적절치 못한 로그인 시도입니다.`);\r\n    }\r\n  }\r\n  onAuthStatus(callback: (user: AuthType) => void) {\r\n    firebaseAuth.onAuthStateChanged((user: AuthType) => {\r\n      callback(user);\r\n    });\r\n  }\r\n  isUser() {\r\n    const user = firebaseAuth.currentUser;\r\n  }\r\n  logout() {\r\n    firebaseAuth.signOut();\r\n  }\r\n}\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\firebase.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\index.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\todos.ts",["134"],"import Card from 'src/components/Card/Card';\r\n\r\nconst ADD_CARD = 'todo/ADD_CARD' as const;\r\nconst DELETE_CARD = 'todo/DELETE_CARD' as const;\r\nconst SAME_CHANGE_CARD = 'todo/SAME_CHANGE_CARD' as const;\r\nconst DIFF_CHANGE_CARD = 'todo/DIFF_CHANGE_CARD' as const;\r\nconst ADD_TODO = 'todo/ADD_TODO' as const;\r\nconst DELETE_TODO = 'todo/DELETE_TODO' as const;\r\nconst UPDATE_TODO = 'todo/UPDATE_TODO' as const;\r\nconst TOGGLE_TODO = 'todo/TOGGLE_TODO' as const;\r\nconst UPDATE_DATE = 'todo/UPDATE_DATE' as const;\r\n\r\nexport const addCardAction = (id: string, today: string) => {\r\n  return {\r\n    type: ADD_CARD,\r\n    payload: { id: id, today: today },\r\n  };\r\n};\r\n\r\nexport const deleteCardAction = (id: string) => {\r\n  return {\r\n    type: DELETE_CARD,\r\n    payload: { id: id },\r\n  };\r\n};\r\n\r\nexport const sameChangeCardAction = (sIndex: number, dIndex: number) => {\r\n  return {\r\n    type: SAME_CHANGE_CARD,\r\n    payload: {\r\n      sIndex: sIndex,\r\n      dIndex: dIndex,\r\n    },\r\n  };\r\n};\r\n\r\nexport const diffChangeCardAction = (\r\n  id: string,\r\n  sIndex: number,\r\n  dIndex: number\r\n) => {\r\n  return {\r\n    type: DIFF_CHANGE_CARD,\r\n    payload: {\r\n      id: id,\r\n      sIndex: sIndex,\r\n      dIndex: dIndex,\r\n    },\r\n  };\r\n};\r\n\r\nexport const addTodoAction = (cardId: string, id: number, newTodo: string) => {\r\n  return {\r\n    type: ADD_TODO,\r\n    payload: {\r\n      cardId: cardId,\r\n      id: id,\r\n      thing: newTodo,\r\n    },\r\n  };\r\n};\r\n\r\nexport const deleteTodoAction = (cardId: string, id: number) => {\r\n  return {\r\n    type: DELETE_TODO,\r\n    payload: {\r\n      cardId: cardId,\r\n      id: id,\r\n    },\r\n  };\r\n};\r\n\r\nexport const updateTodoAction = (cardId: string, id: number, todo: string) => {\r\n  return {\r\n    type: UPDATE_TODO,\r\n    payload: {\r\n      cardId: cardId,\r\n      id: id,\r\n      todo: todo,\r\n    },\r\n  };\r\n};\r\n\r\nexport const toggleTodoAction = (cardId : string, id : number) => {\r\n  return {\r\n    type : TOGGLE_TODO,\r\n    payload : {\r\n      cardId : cardId,\r\n      id : id,\r\n    }\r\n  }\r\n}\r\n\r\nexport const updateDateAction = (cardId: string, today: string) => {\r\n  return {\r\n    type: UPDATE_DATE,\r\n    payload: {\r\n      cardId: cardId,\r\n      today: today,\r\n    },\r\n  };\r\n};\r\n\r\ntype ActionType =\r\n  | ReturnType<typeof addCardAction>\r\n  | ReturnType<typeof deleteCardAction>\r\n  | ReturnType<typeof addTodoAction>\r\n  | ReturnType<typeof deleteTodoAction>\r\n  | ReturnType<typeof updateTodoAction>\r\n  | ReturnType<typeof toggleTodoAction>\r\n  | ReturnType<typeof sameChangeCardAction>\r\n  | ReturnType<typeof diffChangeCardAction>\r\n  | ReturnType<typeof updateDateAction>\r\n\r\ntype StateType = {\r\n  id: string;\r\n  current: boolean;\r\n  today: string;\r\n  todos: TodoType;\r\n}[];\r\n\r\ntype TodoType = {\r\n  id: number;\r\n  thing: string;\r\n  checked : boolean;\r\n}[];\r\n\r\nconst initialState: StateType = [];\r\n\r\nconst todoReducer = (state: StateType = initialState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case ADD_CARD:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.payload.id,\r\n          current: false,\r\n          today: action.payload.today,\r\n          todos: [],\r\n        },\r\n      ];\r\n    case DELETE_CARD:\r\n      return state.filter((card) => card.id !== action.payload.id);\r\n\r\n    case SAME_CHANGE_CARD:\r\n      const newCards = [...state];\r\n      const [reorderedItem] = newCards.splice(action.payload.sIndex, 1);\r\n      newCards.splice(action.payload.dIndex, 0, reorderedItem);\r\n      return newCards;\r\n\r\n    case DIFF_CHANGE_CARD:\r\n      const addingCard = state.find((card) => card.current === true);\r\n      const originCard = state.filter((card) => card.current === false);\r\n\r\n      addingCard && originCard.splice(action.payload.dIndex - 1, 0, addingCard);\r\n\r\n      return originCard.map((card) => {\r\n        if (card.id === action.payload.id) {\r\n          return { ...card, current: !card.current };\r\n        }\r\n        return { ...card, current: false };\r\n      });\r\n\r\n    case ADD_TODO:\r\n      return state.map((card) => {\r\n        if (card.id === action.payload.cardId) {\r\n          return {\r\n            ...card,\r\n            todos: [\r\n              ...card.todos,\r\n              { id: action.payload.id, thing: action.payload.thing, checked: false },\r\n            ],\r\n          };\r\n        }\r\n        return card;\r\n      });\r\n    case DELETE_TODO:\r\n      return state.map((card) => {\r\n        if (card.id === action.payload.cardId) {\r\n          return {\r\n            ...card,\r\n            todos: card.todos.filter((todo) => todo.id !== action.payload.id),\r\n          };\r\n        }\r\n        return card;\r\n      });\r\n    case UPDATE_TODO:\r\n      return state.map((card) => {\r\n        if (card.id === action.payload.cardId) {\r\n          return {\r\n            ...card,\r\n            todos: card.todos.map((todo) => {\r\n              if (todo.id === action.payload.id) {\r\n                return { ...todo, thing: action.payload.todo };\r\n              }\r\n              return todo;\r\n            }),\r\n          };\r\n        }\r\n        return card;\r\n      });\r\n    case TOGGLE_TODO:\r\n      return state.map(card => {\r\n        if(card.id === action.payload.cardId){\r\n          return {\r\n            ...card,\r\n            todos : card.todos.map(todo => {\r\n              if(todo.id === action.payload.id){\r\n                return {...todo, checked : !todo.checked};\r\n              }\r\n              return todo\r\n            })\r\n          }\r\n        }\r\n        return card\r\n      })\r\n    case UPDATE_DATE:\r\n      return state.map((card) => {\r\n        if (card.id === action.payload.cardId) {\r\n          return { ...card, today: action.payload.today };\r\n        }\r\n        return card;\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.style.ts",["135"],"import styled from 'styled-components';\r\nimport { MainBackgroundColor } from '../../utils/css-utils';\r\n\r\nexport const ListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #c8e6c9;\r\n  overflow: auto;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  padding-bottom: 20px;\r\n`;\r\nexport const EditorTitle = styled.h1<{ fold: boolean }>`\r\n  display: ${(props) => (props.fold ? 'inline' : 'none')};\r\n  text-align: center;\r\n`;\r\n\r\nexport const CardListContainer = styled.ul<{isDraggingOver : boolean}>`\r\n  padding-left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const CardAddBtn = styled.button`\r\n  font-size: 30px;\r\n  background-color: transparent;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  margin: 0 0 20px 0;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nexport const EditorContainer = styled.div<{ fold: boolean }>`\r\n  width: ${(props) => (props.fold ? '300px' : '0')};\r\n  margin: 0;\r\n  padding-left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: width 100ms ease;\r\n  ${CardListContainer} {\r\n    display: ${(props) => (props.fold ? 'flex' : 'none')};\r\n  }\r\n  ${CardAddBtn} {\r\n    display: ${(props) => (props.fold ? 'flex' : 'none')};\r\n  }\r\n`;\r\nexport const ArrowIcon = styled.svg`\r\n  position: sticky;\r\n  top: 45%;\r\n  width: 20px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n  padding: 0 10px;\r\n`;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.tsx",["136","137"],"import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport * as S from './ReadCard.style';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleTodoAction, deleteCardAction } from '../../modules/todos';\r\n\r\ntype PropType = {\r\n  currentId: string;\r\n  today: string;\r\n  todos: {\r\n    id: number;\r\n    thing: string;\r\n    checked: boolean;\r\n  }[];\r\n};\r\n\r\nconst ReadCard: React.FC<PropType> = ({ currentId, today, todos }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleHandler = (id: number) => () => {\r\n    dispatch(toggleTodoAction(currentId, id));\r\n  };\r\n\r\n  const deleteCardHandelr = () => {\r\n    dispatch(deleteCardAction(currentId));\r\n  };\r\n  return (\r\n    <Draggable key={currentId} draggableId={currentId} index={0}>\r\n      {(provided, snapshot) => (\r\n        <S.ReadCardContainer\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          isDragging={snapshot.isDragging}\r\n        >\r\n          <S.ReadCardHeader>\r\n            <S.ReadCardTitle>{today} 할일 목록</S.ReadCardTitle>\r\n            <S.CardDeleteBtn onClick={deleteCardHandelr}>\r\n              <S.TrashIcon />\r\n            </S.CardDeleteBtn>\r\n            <S.DragElement {...provided.dragHandleProps}>\r\n              <S.DragIcon />\r\n            </S.DragElement>\r\n          </S.ReadCardHeader>\r\n          <S.ReadCardListContainer>\r\n            {todos.map((todo) => (\r\n              <S.ReadCardList done={todo.checked} key={todo.id}>\r\n                <S.todoContent>{todo.thing}</S.todoContent>\r\n                <S.toggleBtn onClick={onToggleHandler(todo.id)}>\r\n                  {todo.checked ? 'uncheck' : 'check'}\r\n                </S.toggleBtn>\r\n              </S.ReadCardList>\r\n            ))}\r\n          </S.ReadCardListContainer>\r\n        </S.ReadCardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default ReadCard;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.style.ts",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":71,"column":6,"nodeType":"144","endLine":71,"endColumn":8,"suggestions":"145"},{"ruleId":"142","severity":1,"message":"146","line":31,"column":6,"nodeType":"144","endLine":31,"endColumn":8,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":31,"column":11,"nodeType":"150","messageId":"151","endLine":31,"endColumn":15},{"ruleId":"148","severity":1,"message":"152","line":1,"column":8,"nodeType":"150","messageId":"151","endLine":1,"endColumn":12},{"ruleId":"148","severity":1,"message":"153","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":29},{"ruleId":"154","severity":1,"message":"155","line":47,"column":17,"nodeType":"156","endLine":47,"endColumn":32},{"ruleId":"154","severity":1,"message":"157","line":48,"column":17,"nodeType":"156","endLine":48,"endColumn":65},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authService' and 'goToMain'. Either include them or remove the dependency array.","ArrayExpression",["160"],"React Hook useEffect has missing dependencies: 'authService' and 'history'. Either include them or remove the dependency array.",["161"],"@typescript-eslint/no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'Card' is defined but never used.","'MainBackgroundColor' is defined but never used.","react/jsx-pascal-case","Imported JSX component todoContent must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component toggleBtn must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},"Update the dependencies array to be: [authService, goToMain]",{"range":"166","text":"167"},"Update the dependencies array to be: [authService, history]",{"range":"168","text":"169"},[1906,1908],"[authService, goToMain]",[1050,1052],"[authService, history]"]
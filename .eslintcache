[{"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\index.tsx":"1","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\reportWebVitals.ts":"2","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\App.tsx":"3","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.tsx":"4","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.tsx":"5","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.style.ts":"6","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\utils\\css-utils.ts":"7","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\auth_service.ts":"8","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\firebase.ts":"9","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.style.ts":"10","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.tsx":"11","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.tsx":"12","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.style.ts":"13","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.tsx":"14","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.style.ts":"15","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.style.ts":"16","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.tsx":"17","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.style.ts":"18","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.tsx":"19","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.tsx":"20","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.style.ts":"21","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\index.ts":"22","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\todos.ts":"23","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.tsx":"24","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.tsx":"25","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.style.ts":"26","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.style.ts":"27","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.style.ts":"28","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.tsx":"29","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.style.ts":"30","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\data_service.ts":"31","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Ranking\\Ranking.tsx":"32","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Ranking\\Ranking.style.ts":"33","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Modal\\Modal.tsx":"34","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Modal\\Modal.style.ts":"35","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Modal\\CloseButton.tsx":"36","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Modal\\CloseButton.style.ts":"37"},{"size":950,"mtime":1613542090225,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1612327212632,"results":"40","hashOfConfig":"39"},{"size":910,"mtime":1614165961636,"results":"41","hashOfConfig":"39"},{"size":3151,"mtime":1614258191040,"results":"42","hashOfConfig":"39"},{"size":5460,"mtime":1614258069610,"results":"43","hashOfConfig":"39"},{"size":2353,"mtime":1612684084796,"results":"44","hashOfConfig":"39"},{"size":276,"mtime":1612684073845,"results":"45","hashOfConfig":"39"},{"size":1198,"mtime":1614245695825,"results":"46","hashOfConfig":"39"},{"size":784,"mtime":1613538971249,"results":"47","hashOfConfig":"39"},{"size":1644,"mtime":1614239505962,"results":"48","hashOfConfig":"39"},{"size":1686,"mtime":1614166574533,"results":"49","hashOfConfig":"39"},{"size":5793,"mtime":1614230659046,"results":"50","hashOfConfig":"39"},{"size":1705,"mtime":1612684096233,"results":"51","hashOfConfig":"39"},{"size":3346,"mtime":1614166528444,"results":"52","hashOfConfig":"39"},{"size":1902,"mtime":1614256935456,"results":"53","hashOfConfig":"39"},{"size":534,"mtime":1612498497364,"results":"54","hashOfConfig":"39"},{"size":1543,"mtime":1614234712815,"results":"55","hashOfConfig":"39"},{"size":155,"mtime":1612506051287,"results":"56","hashOfConfig":"39"},{"size":1388,"mtime":1614166647244,"results":"57","hashOfConfig":"39"},{"size":2700,"mtime":1614257061544,"results":"58","hashOfConfig":"39"},{"size":745,"mtime":1614168324524,"results":"59","hashOfConfig":"39"},{"size":224,"mtime":1613290070010,"results":"60","hashOfConfig":"39"},{"size":5889,"mtime":1614082992383,"results":"61","hashOfConfig":"39"},{"size":1175,"mtime":1614257144283,"results":"62","hashOfConfig":"39"},{"size":2687,"mtime":1614166452293,"results":"63","hashOfConfig":"39"},{"size":1780,"mtime":1613538711642,"results":"64","hashOfConfig":"39"},{"size":635,"mtime":1614257242632,"results":"65","hashOfConfig":"39"},{"size":697,"mtime":1614168359506,"results":"66","hashOfConfig":"39"},{"size":2178,"mtime":1614166633249,"results":"67","hashOfConfig":"39"},{"size":1985,"mtime":1614256963882,"results":"68","hashOfConfig":"39"},{"size":4817,"mtime":1614247206015,"results":"69","hashOfConfig":"39"},{"size":1807,"mtime":1614256837902,"results":"70","hashOfConfig":"39"},{"size":1528,"mtime":1614257293630,"results":"71","hashOfConfig":"39"},{"size":3821,"mtime":1614258349752,"results":"72","hashOfConfig":"39"},{"size":2227,"mtime":1614256713993,"results":"73","hashOfConfig":"39"},{"size":320,"mtime":1614256758015,"results":"74","hashOfConfig":"39"},{"size":415,"mtime":1614256779504,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"12vozf8",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\index.tsx",[],["157","158"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\reportWebVitals.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\App.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.tsx",["159"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.tsx",["160","161"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\login\\Login.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\utils\\css-utils.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\auth_service.ts",["162"],"import { AuthType, SinUpType, firebaseAuth, GoogleProvider } from './firebase';\r\n\r\nexport type AuthServiceType = {\r\n  signUp(email: string, password: string): SinUpType;\r\n  login(email: string, password: string): SinUpType;\r\n  onAuthStatus(callback: (user: AuthType) => void): void;\r\n  logout(): void;\r\n  delete(): void;\r\n};\r\n\r\nexport default class AuthService {\r\n  signUp(email: string, password: string) {\r\n    return firebaseAuth.createUserWithEmailAndPassword(email, password);\r\n  }\r\n  login(email: string, password: string) {\r\n    return firebaseAuth.signInWithEmailAndPassword(email, password);\r\n  }\r\n  createProvider(provider: string) {\r\n    switch (provider) {\r\n      case 'Google':\r\n        return GoogleProvider;\r\n      default:\r\n        throw new Error(`${provider}: 적절치 못한 로그인 시도입니다.`);\r\n    }\r\n  }\r\n  onAuthStatus(callback: (user: AuthType) => void) {\r\n    firebaseAuth.onAuthStateChanged((user: AuthType) => {\r\n      callback(user);\r\n    });\r\n  }\r\n  isUser() {\r\n    const user = firebaseAuth.currentUser;\r\n  }\r\n  logout() {\r\n    firebaseAuth.signOut();\r\n  }\r\n  delete() {\r\n    const deleteUser = firebaseAuth.currentUser;\r\n    deleteUser?.delete();\r\n  }\r\n}\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\firebase.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\main\\Main.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.tsx",["163"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  SignUpForm,\r\n  SignUpTitle,\r\n  SignUpLabel,\r\n  SignUpBox,\r\n  SinUpInput,\r\n  CheckIcon,\r\n  SignUpBtn,\r\n  BackLoginContainer,\r\n  BackLoginText,\r\n  BackLoginBtn,\r\n} from './SignUp.style';\r\nimport { AuthServiceType } from '../../services/auth_service';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { DatabaseType } from 'src/services/data_service';\r\n\r\nconst EmailReg = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n\r\ntype PropType = {\r\n  authService: AuthServiceType;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst SignUp: React.FC<PropType> = ({ authService, databaseService }) => {\r\n  const [isCharacterProper, setIsCharacterProper] = useState(false);\r\n  const [isEmailProper, setIsEmailProper] = useState(false);\r\n  const [isPwdProper, setIsPwdProper] = useState(false);\r\n  const [isRePwdProper, setIsRePwdProper] = useState(false);\r\n  const [newUser, setNewUser] = useState({\r\n    character: '',\r\n    email: '',\r\n    pwd: '',\r\n    rePwd: '',\r\n  });\r\n  const [existedUsers, setExistedUsers] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const getUsers = databaseService.getUserDatas((datas) => {\r\n      if (!datas) setExistedUsers([]);\r\n      else {\r\n        const existedUsersList = Object.keys(datas).map(\r\n          (user) => datas[user].userName\r\n        );\r\n        console.log(existedUsersList);\r\n        setExistedUsers(existedUsersList);\r\n      }\r\n    });\r\n\r\n    return () => getUsers();\r\n  }, []);\r\n\r\n  const history = useHistory();\r\n  const goToLogin = () => {\r\n    history.push('/');\r\n  };\r\n  const signUpHandler = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ) => {\r\n    if (!isAllClear()) return;\r\n    if (!isCharacterProper) {\r\n      alert('이미 존재하는 이름입니다.');\r\n      return;\r\n    }\r\n    authService\r\n      .signUp(newUser.email, newUser.pwd)\r\n      .then((user) => {\r\n        user &&\r\n          user.user &&\r\n          databaseService.createUser(user.user?.uid, newUser.character);\r\n        alert('회원가입 성공!');\r\n        authService.logout();\r\n        goToLogin();\r\n      })\r\n      .catch((err) => {\r\n        if (err.code === 'auth/email-already-in-use') {\r\n          alert('이미 존재하는 이메일입니다.');\r\n        }\r\n      });\r\n  };\r\n  const upDateUserInfo = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const id = e.currentTarget.id;\r\n    const value = e.currentTarget.value;\r\n    console.log(typeof value.length);\r\n    if (id === 'character') {\r\n      if (value.length > 6) return;\r\n      existedUsers.some((characterName) => value === characterName)\r\n        ? setIsCharacterProper(false)\r\n        : setIsCharacterProper(true);\r\n    } else if (id === 'email') {\r\n      EmailReg.test(value) ? setIsEmailProper(true) : setIsEmailProper(false);\r\n    } else if (id === 'pwd') {\r\n      value.length >= 6 ? setIsPwdProper(true) : setIsPwdProper(false);\r\n    } else if (id === 'rePwd') {\r\n      newUser.pwd === value && value.length >= 6\r\n        ? setIsRePwdProper(true)\r\n        : setIsRePwdProper(false);\r\n    }\r\n    setNewUser((user) => ({ ...user, [id]: value }));\r\n  };\r\n  const isAllClear = () => {\r\n    if (isEmailProper && isRePwdProper && newUser.character) return true;\r\n    else return false;\r\n  };\r\n  return (\r\n    <SignUpForm\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      <SignUpTitle>회원가입</SignUpTitle>\r\n      <SignUpLabel htmlFor=\"character\">사용할 별명 입력하세요</SignUpLabel>\r\n      <SignUpBox>\r\n        <SinUpInput\r\n          type=\"text\"\r\n          id=\"character\"\r\n          value={newUser.character}\r\n          onChange={upDateUserInfo}\r\n          placeholder=\"별명 입력해주세요. (6자리 이하)\"\r\n        />\r\n        {newUser.character && <CheckIcon>✔</CheckIcon>}\r\n      </SignUpBox>\r\n      <SignUpLabel htmlFor=\"email\">이메일 입력하세요</SignUpLabel>\r\n      <SignUpBox>\r\n        <SinUpInput\r\n          type=\"text\"\r\n          id=\"email\"\r\n          value={newUser.email}\r\n          onChange={upDateUserInfo}\r\n          placeholder=\"이메일입력해주세요.\"\r\n        />\r\n        {newUser.email ? (\r\n          isEmailProper ? (\r\n            <CheckIcon>✔</CheckIcon>\r\n          ) : (\r\n            <CheckIcon>❕</CheckIcon>\r\n          )\r\n        ) : null}\r\n      </SignUpBox>\r\n      <SignUpLabel htmlFor=\"pwd\"> 비밀번호 입력하세요</SignUpLabel>\r\n      <SignUpBox>\r\n        <SinUpInput\r\n          type=\"password\"\r\n          id=\"pwd\"\r\n          value={newUser.pwd}\r\n          onChange={upDateUserInfo}\r\n          placeholder=\"최소 6자리입니다.\"\r\n        />\r\n        {newUser.pwd ? (\r\n          isPwdProper ? (\r\n            <CheckIcon>✔</CheckIcon>\r\n          ) : (\r\n            <CheckIcon>❕</CheckIcon>\r\n          )\r\n        ) : null}\r\n      </SignUpBox>\r\n      <SignUpLabel htmlFor=\"rePwd\"> 비밀번호 다시 입력하세요</SignUpLabel>\r\n      <SignUpBox>\r\n        <SinUpInput\r\n          type=\"password\"\r\n          id=\"rePwd\"\r\n          value={newUser.rePwd}\r\n          onChange={upDateUserInfo}\r\n          placeholder=\"최소 6자리입니다.\"\r\n        />\r\n        {newUser.rePwd ? (\r\n          isRePwdProper ? (\r\n            <CheckIcon>✔</CheckIcon>\r\n          ) : (\r\n            <CheckIcon>❕</CheckIcon>\r\n          )\r\n        ) : null}\r\n      </SignUpBox>\r\n      <SignUpBtn isComplete={isAllClear()} onClick={signUpHandler}>\r\n        가입하기\r\n      </SignUpBtn>\r\n      <BackLoginContainer>\r\n        <BackLoginText>회원이신가요?</BackLoginText>\r\n        <BackLoginBtn onClick={goToLogin}>로그인</BackLoginBtn>\r\n        <BackLoginText>으로 돌아가기</BackLoginText>\r\n      </BackLoginContainer>\r\n    </SignUpForm>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\pages\\signup\\SignUp.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Card\\Card.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\TodoForm\\Todo.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Calender\\Calender.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.tsx",["164"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\PlanTimer\\PlanTimer.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\index.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\modules\\todos.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.tsx",["165","166"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.tsx",["167","168"],"import React, { useState } from 'react';\r\nimport Card from '../Card/Card';\r\nimport {\r\n  ListContainer,\r\n  Container,\r\n  EditorContainer,\r\n  ArrowIcon,\r\n  EditorTitle,\r\n  CardListContainer,\r\n  CardAddBtn,\r\n} from './List.style';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootType } from '../../modules/index';\r\nimport { addCardAction, StateType } from '../../modules/todos';\r\nimport { ReactComponent as LeftSVG } from '../../assets/svg/chevron-left-solid.svg';\r\nimport { ReactComponent as RightSVG } from '../../assets/svg/chevron-right-solid.svg';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport { DatabaseType } from 'src/services/data_service';\r\n\r\ntype PropType = {\r\n  cards: StateType;\r\n  uid: string | null;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst List: React.FC<PropType> = ({ cards, uid, databaseService }) => {\r\n  const [fold, setFold] = useState(true);\r\n  const dispatch = useDispatch();\r\n  // const cards = useSelector((state: RootType) => state.todoReducer);\r\n  console.log(cards);\r\n  const addCard = () => {\r\n    const newId = Date.now();\r\n\r\n    const date = new Date();\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n\r\n    const today = `${year}-${month}-${day}`;\r\n\r\n    dispatch(addCardAction(String(newId), today));\r\n    databaseService.write(uid, String(newId), today);\r\n  };\r\n  const onFoldHandler = () => {\r\n    setFold((fold) => !fold);\r\n  };\r\n\r\n  return (\r\n    <ListContainer>\r\n      <EditorTitle fold={fold}>Plan your todos</EditorTitle>\r\n      <Container>\r\n        <EditorContainer fold={fold}>\r\n          <Droppable droppableId=\"cards\">\r\n            {(provided, snapshot) => (\r\n              <CardListContainer\r\n                className=\"cards\"\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n                isDraggingOver={snapshot.isDraggingOver}\r\n              >\r\n                {cards.map((card, index) => (\r\n                  <Card\r\n                    key={card.id}\r\n                    cardId={card.id}\r\n                    todos={card.todos}\r\n                    current={card.current}\r\n                    index={index}\r\n                    uid={uid}\r\n                    databaseService={databaseService}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n              </CardListContainer>\r\n            )}\r\n          </Droppable>\r\n          <CardAddBtn onClick={addCard}>➕</CardAddBtn>\r\n        </EditorContainer>\r\n        <ArrowIcon as={fold ? LeftSVG : RightSVG} onClick={onFoldHandler} />\r\n      </Container>\r\n    </ListContainer>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\List\\List.style.ts",["169"],"import styled from 'styled-components';\r\nimport { MainBackgroundColor } from '../../utils/css-utils';\r\n\r\nexport const ListContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #c8e6c9;\r\n  overflow: auto;\r\n  &::-webkit-scrollbar {\r\n    /* 세로 스크롤 넓이 */\r\n    width: 8px;\r\n\r\n    /* 가로 스크롤 높이 */\r\n    height: 8px;\r\n\r\n    border-radius: 6px;\r\n    background: rgba(255, 255, 255, 0.4);\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    border-radius: 6px;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  padding-bottom: 20px;\r\n`;\r\nexport const EditorTitle = styled.h1<{ fold: boolean }>`\r\n  display: ${(props) => (props.fold ? 'inline' : 'none')};\r\n  text-align: center;\r\n`;\r\n\r\nexport const CardListContainer = styled.ul<{ isDraggingOver: boolean }>`\r\n  padding-left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const CardAddBtn = styled.button`\r\n  font-size: 30px;\r\n  background-color: transparent;\r\n  border: none;\r\n  outline: none;\r\n  cursor: pointer;\r\n  margin: 0 0 20px 0;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nexport const EditorContainer = styled.div<{ fold: boolean }>`\r\n  width: ${(props) => (props.fold ? '300px' : '0')};\r\n  margin: 0;\r\n  padding-left: 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: width 100ms ease;\r\n  ${CardListContainer} {\r\n    display: ${(props) => (props.fold ? 'flex' : 'none')};\r\n  }\r\n  ${CardAddBtn} {\r\n    display: ${(props) => (props.fold ? 'flex' : 'none')};\r\n  }\r\n`;\r\nexport const ArrowIcon = styled.svg`\r\n  position: sticky;\r\n  top: 45%;\r\n  width: 20px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n  padding: 0 10px;\r\n`;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\StartPlan\\StartPlan.style.ts",["170"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\CurrentPlan\\CurrentPlan.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.tsx",["171","172"],"import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport * as S from './ReadCard.style';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleTodoAction, deleteCardAction } from '../../modules/todos';\r\nimport { DatabaseType } from 'src/services/data_service';\r\n\r\ntype PropType = {\r\n  currentId: string;\r\n  today: string;\r\n  todos: {\r\n    id: number;\r\n    thing: string;\r\n    checked: boolean;\r\n  }[];\r\n  uid: string | null;\r\n  databaseService: DatabaseType;\r\n};\r\n\r\nconst ReadCard: React.FC<PropType> = ({\r\n  currentId,\r\n  today,\r\n  todos,\r\n  uid,\r\n  databaseService,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const onToggleHandler = (id: number, checked: boolean) => () => {\r\n    dispatch(toggleTodoAction(currentId, id, !checked));\r\n    databaseService.toggleTodo(uid, currentId, id, !checked);\r\n  };\r\n\r\n  const deleteCardHandelr = () => {\r\n    dispatch(deleteCardAction(currentId));\r\n    databaseService.remove(uid, currentId);\r\n  };\r\n  return (\r\n    <Draggable key={currentId} draggableId={currentId} index={0}>\r\n      {(provided, snapshot) => (\r\n        <S.ReadCardContainer\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          isDragging={snapshot.isDragging}\r\n        >\r\n          <S.ReadCardHeader>\r\n            <S.ReadCardTitle>{today} 할일 목록</S.ReadCardTitle>\r\n            <S.CardDeleteBtn onClick={deleteCardHandelr}>\r\n              <S.TrashIcon />\r\n            </S.CardDeleteBtn>\r\n            <S.DragElement {...provided.dragHandleProps}>\r\n              <S.DragIcon />\r\n            </S.DragElement>\r\n          </S.ReadCardHeader>\r\n          <S.ReadCardListContainer>\r\n            {todos.map((todo) => (\r\n              <S.ReadCardList done={todo.checked} key={todo.id}>\r\n                <S.todoContent>{todo.thing}</S.todoContent>\r\n                <S.toggleBtn onClick={onToggleHandler(todo.id, todo.checked)}>\r\n                  {todo.checked ? 'uncheck' : 'check'}\r\n                </S.toggleBtn>\r\n              </S.ReadCardList>\r\n            ))}\r\n          </S.ReadCardListContainer>\r\n        </S.ReadCardContainer>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default ReadCard;\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\ReadCard\\ReadCard.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\services\\data_service.ts",["173"],"import { firebaseDatabase } from './firebase';\r\nimport { StateType } from '../modules/todos';\r\n\r\n// type TodoType = {\r\n//   id: number;\r\n//   thing: string;\r\n//   checked: boolean;\r\n// }[];\r\n\r\n// type CardType = {\r\n//   id: string;\r\n//   current: boolean;\r\n//   today: string;\r\n//   todos: TodoType;\r\n// };\r\n\r\ntype CallbackType = (value: any) => void;\r\n\r\nexport type DatabaseType = {\r\n  write(uid: string | null, id: string, today: string): void;\r\n  writeTodo(uid: string | null, id: string, todoId: number, todo: string): void;\r\n  remove(uid: string | null, id: string): void;\r\n  removeTodo(uid: string | null, id: string, todoId: number): void;\r\n  updateTodo(\r\n    uid: string | null,\r\n    id: string,\r\n    todoId: number,\r\n    updateTodo: string\r\n  ): void;\r\n  toggleTodo(\r\n    uid: string | null,\r\n    id: string,\r\n    todoId: number,\r\n    checked: boolean\r\n  ): void;\r\n  updateCalendar(uid: string | null, id: string, today: string): void;\r\n  changeToStart(\r\n    uid: string | null,\r\n    id: string,\r\n    current: boolean,\r\n    prevCardId?: string\r\n  ): void;\r\n  dataSync(uid: string | null, update?: CallbackType): any;\r\n  createUser(uid: string | null, userName: string): void;\r\n  updateTime(uid: string | null, time: number): void;\r\n  timeSync(uid: string | null, update?: CallbackType): any;\r\n  getUserDatas(show?: CallbackType): any;\r\n  getLoginUserData(uid: string | null, get?: CallbackType): any;\r\n  changeCharacterName(uid: string | null, newUserName: string): void;\r\n  deleteUser(uid: string | null): void;\r\n};\r\n\r\nexport default class Database {\r\n  write(uid: string | null, id: string, today: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).set({\r\n      id: id,\r\n      current: false,\r\n      today: today,\r\n      todos: '',\r\n    });\r\n  }\r\n\r\n  writeTodo(uid: string | null, id: string, todoId: number, todo: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).set({\r\n      id: todoId,\r\n      thing: todo,\r\n      checked: false,\r\n    });\r\n  }\r\n\r\n  remove(uid: string | null, id: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).remove();\r\n  }\r\n\r\n  removeTodo(uid: string | null, id: string, todoId: number) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).remove();\r\n  }\r\n\r\n  updateTodo(\r\n    uid: string | null,\r\n    id: string,\r\n    todoId: number,\r\n    updateTodo: string\r\n  ) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).update({\r\n      thing: updateTodo,\r\n    });\r\n  }\r\n\r\n  toggleTodo(uid: string | null, id: string, todoId: number, checked: boolean) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}/todos/${todoId}`).update({\r\n      checked: checked,\r\n    });\r\n  }\r\n\r\n  updateCalendar(uid: string | null, id: string, today: string) {\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).update({\r\n      today: today,\r\n    });\r\n  }\r\n\r\n  changeToStart(\r\n    uid: string | null,\r\n    id: string,\r\n    current: boolean,\r\n    prevCardId?: string\r\n  ) {\r\n    prevCardId &&\r\n      firebaseDatabase.ref(`users/${uid}/${prevCardId}`).update({\r\n        current: !current,\r\n      });\r\n    firebaseDatabase.ref(`users/${uid}/${id}`).update({\r\n      current: current,\r\n    });\r\n  }\r\n\r\n  dataSync(uid: string | null, update?: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref(`users/${uid}`);\r\n    datasRef.on('value', (snapshot) => {\r\n      update && update(snapshot.val());\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n\r\n  createUser(uid: string | null, userName: string) {\r\n    firebaseDatabase.ref(`times/${uid}`).set({\r\n      userName: userName,\r\n      time: 0,\r\n    });\r\n  }\r\n\r\n  updateTime(uid: string | null, time: number) {\r\n    firebaseDatabase.ref(`times/${uid}`).update({\r\n      time: time,\r\n    });\r\n  }\r\n  timeSync(uid: string | null, update?: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref(`times/${uid}`);\r\n    datasRef.on('value', (snapshot) => {\r\n      update && update(snapshot.val().time);\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n  getUserDatas(show?: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref('times');\r\n    datasRef.on('value', (snapshot) => {\r\n      // console.log(snapshot.val());\r\n      show && show(snapshot.val());\r\n    });\r\n\r\n    return () => datasRef.off();\r\n  }\r\n  getLoginUserData(uid: string | null, get?: CallbackType) {\r\n    const datasRef = firebaseDatabase.ref(`times`);\r\n    datasRef.on('value', (snapshop) => {\r\n      if (uid) {\r\n        get && get(snapshop.val()[uid].userName);\r\n      }\r\n    });\r\n\r\n    return () => datasRef;\r\n  }\r\n\r\n  changeCharacterName(uid: string | null, newUserName: string) {\r\n    firebaseDatabase.ref(`times/${uid}`).update({\r\n      userName: newUserName,\r\n    });\r\n  }\r\n  deleteUser(uid: string | null) {\r\n    firebaseDatabase.ref(`times/${uid}`).remove();\r\n    firebaseDatabase.ref(`users/${uid}`).remove();\r\n  }\r\n}\r\n","C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Ranking\\Ranking.tsx",["174","175","176","177"],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Ranking\\Ranking.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Modal\\Modal.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Modal\\Modal.style.ts",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Modal\\CloseButton.tsx",[],"C:\\Users\\염재선\\Desktop\\studies\\todolist_react\\src\\components\\Modal\\CloseButton.style.ts",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":71,"column":6,"nodeType":"184","endLine":71,"endColumn":8,"suggestions":"185"},{"ruleId":"182","severity":1,"message":"186","line":66,"column":6,"nodeType":"184","endLine":66,"endColumn":23,"suggestions":"187"},{"ruleId":"182","severity":1,"message":"188","line":74,"column":6,"nodeType":"184","endLine":74,"endColumn":8,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":32,"column":11,"nodeType":"192","messageId":"193","endLine":32,"endColumn":15},{"ruleId":"182","severity":1,"message":"194","line":51,"column":6,"nodeType":"184","endLine":51,"endColumn":8,"suggestions":"195"},{"ruleId":"182","severity":1,"message":"188","line":41,"column":6,"nodeType":"184","endLine":41,"endColumn":8,"suggestions":"196"},{"ruleId":"190","severity":1,"message":"197","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":26},{"ruleId":"190","severity":1,"message":"198","line":1,"column":28,"nodeType":"192","messageId":"193","endLine":1,"endColumn":36},{"ruleId":"190","severity":1,"message":"199","line":12,"column":10,"nodeType":"192","messageId":"193","endLine":12,"endColumn":21},{"ruleId":"190","severity":1,"message":"200","line":13,"column":10,"nodeType":"192","messageId":"193","endLine":13,"endColumn":18},{"ruleId":"190","severity":1,"message":"201","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":29},{"ruleId":"190","severity":1,"message":"202","line":2,"column":31,"nodeType":"192","messageId":"193","endLine":2,"endColumn":40},{"ruleId":"203","severity":1,"message":"204","line":58,"column":17,"nodeType":"205","endLine":58,"endColumn":32},{"ruleId":"203","severity":1,"message":"206","line":59,"column":17,"nodeType":"205","endLine":59,"endColumn":79},{"ruleId":"190","severity":1,"message":"207","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":19},{"ruleId":"182","severity":1,"message":"194","line":40,"column":6,"nodeType":"184","endLine":40,"endColumn":8,"suggestions":"208"},{"ruleId":"203","severity":1,"message":"209","line":49,"column":15,"nodeType":"205","endLine":49,"endColumn":26},{"ruleId":"203","severity":1,"message":"210","line":50,"column":15,"nodeType":"205","endLine":50,"endColumn":27},{"ruleId":"203","severity":1,"message":"211","line":54,"column":15,"nodeType":"205","endLine":54,"endColumn":27},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authService' and 'goToMain'. Either include them or remove the dependency array.","ArrayExpression",["214"],"React Hook useEffect has missing dependencies: 'authService', 'dispatch', 'history', and 'uid'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has missing dependencies: 'databaseService' and 'uid'. Either include them or remove the dependency array.",["216"],"@typescript-eslint/no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'databaseService'. Either include it or remove the dependency array.",["217"],["218"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'useSelector' is defined but never used.","'RootType' is defined but never used.","'MainBackgroundColor' is defined but never used.","'NotiColor' is defined but never used.","react/jsx-pascal-case","Imported JSX component todoContent must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component toggleBtn must be in PascalCase or SCREAMING_SNAKE_CASE","'StateType' is defined but never used.",["219"],"Imported JSX component rankNum must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component rankName must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component rankTIme must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"224","fix":"228"},{"desc":"226","fix":"229"},"Update the dependencies array to be: [authService, goToMain]",{"range":"230","text":"231"},"Update the dependencies array to be: [authService, databaseService, dispatch, history, uid]",{"range":"232","text":"233"},"Update the dependencies array to be: [databaseService, uid]",{"range":"234","text":"235"},"Update the dependencies array to be: [databaseService]",{"range":"236","text":"237"},{"range":"238","text":"235"},{"range":"239","text":"237"},[1906,1908],"[authService, goToMain]",[2215,2232],"[authService, databaseService, dispatch, history, uid]",[2416,2418],"[databaseService, uid]",[1524,1526],"[databaseService]",[1293,1295],[1097,1099]]